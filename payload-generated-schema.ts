/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from "@payloadcms/db-postgres";
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  uuid,
  varchar,
  timestamp,
  numeric,
  jsonb,
  serial,
  integer,
  boolean,
  pgEnum,
} from "@payloadcms/db-postgres/drizzle/pg-core";
import { sql, relations } from "@payloadcms/db-postgres/drizzle";
export const enum_users_role = pgEnum("enum_users_role", [
  "admin",
  "moderator",
  "official",
  "none",
]);
export const enum_news_status = pgEnum("enum_news_status", [
  "draft",
  "published",
]);
export const enum__news_v_version_status = pgEnum(
  "enum__news_v_version_status",
  ["draft", "published"],
);
export const enum_teams_schedules_day = pgEnum("enum_teams_schedules_day", [
  "montags",
  "dienstags",
  "mittwochs",
  "donnerstags",
  "freitags",
  "samstags",
  "sonntags",
]);
export const enum_teams_gender = pgEnum("enum_teams_gender", [
  "men",
  "woman",
  "mixed",
]);
export const enum_teams_league = pgEnum("enum_teams_league", [
  "1. Bundesliga",
  "2. Bundesliga",
  "Dritte Liga",
  "Regionalliga",
  "Oberliga",
  "Verbandsliga",
  "Landesliga",
  "Bezirksliga",
  "Bezirksklasse",
  "Kreisliga",
  "Kreisklasse",
]);

export const users = pgTable(
  "users",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    name: varchar("name"),
    role: enum_users_role("role").notNull().default("none"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    email: varchar("email").notNull(),
    resetPasswordToken: varchar("reset_password_token"),
    resetPasswordExpiration: timestamp("reset_password_expiration", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar("salt"),
    hash: varchar("hash"),
    loginAttempts: numeric("login_attempts").default("0"),
    lockUntil: timestamp("lock_until", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    users_updated_at_idx: index("users_updated_at_idx").on(columns.updatedAt),
    users_created_at_idx: index("users_created_at_idx").on(columns.createdAt),
    users_email_idx: uniqueIndex("users_email_idx").on(columns.email),
  }),
);

export const media = pgTable(
  "media",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    alt: varchar("alt"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    url: varchar("url"),
    thumbnailURL: varchar("thumbnail_u_r_l"),
    filename: varchar("filename"),
    mimeType: varchar("mime_type"),
    filesize: numeric("filesize"),
    width: numeric("width"),
    height: numeric("height"),
    focalX: numeric("focal_x"),
    focalY: numeric("focal_y"),
  },
  (columns) => ({
    media_updated_at_idx: index("media_updated_at_idx").on(columns.updatedAt),
    media_created_at_idx: index("media_created_at_idx").on(columns.createdAt),
    media_filename_idx: uniqueIndex("media_filename_idx").on(columns.filename),
  }),
);

export const events = pgTable(
  "events",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    title: varchar("title").notNull(),
    description: jsonb("description"),
    date_startDate: timestamp("date_start_date", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
    date_endDate: timestamp("date_end_date", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    address_name: varchar("address_name"),
    address_street: varchar("address_street"),
    address_postalCode: numeric("address_postal_code"),
    address_city: varchar("address_city"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    events_updated_at_idx: index("events_updated_at_idx").on(columns.updatedAt),
    events_created_at_idx: index("events_created_at_idx").on(columns.createdAt),
  }),
);

export const events_rels = pgTable(
  "events_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: uuid("parent_id").notNull(),
    path: varchar("path").notNull(),
    mediaID: uuid("media_id"),
    usersID: uuid("users_id"),
  },
  (columns) => ({
    order: index("events_rels_order_idx").on(columns.order),
    parentIdx: index("events_rels_parent_idx").on(columns.parent),
    pathIdx: index("events_rels_path_idx").on(columns.path),
    events_rels_media_id_idx: index("events_rels_media_id_idx").on(
      columns.mediaID,
    ),
    events_rels_users_id_idx: index("events_rels_users_id_idx").on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [events.id],
      name: "events_rels_parent_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "events_rels_media_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "events_rels_users_fk",
    }).onDelete("cascade"),
  }),
);

export const news = pgTable(
  "news",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    title: varchar("title"),
    content: jsonb("content"),
    isPublished: boolean("is_published").default(true),
    publishedDate: timestamp("published_date", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    excerpt: varchar("excerpt"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    _status: enum_news_status("_status").default("draft"),
  },
  (columns) => ({
    news_updated_at_idx: index("news_updated_at_idx").on(columns.updatedAt),
    news_created_at_idx: index("news_created_at_idx").on(columns.createdAt),
    news__status_idx: index("news__status_idx").on(columns._status),
  }),
);

export const news_rels = pgTable(
  "news_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: uuid("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: uuid("users_id"),
    mediaID: uuid("media_id"),
  },
  (columns) => ({
    order: index("news_rels_order_idx").on(columns.order),
    parentIdx: index("news_rels_parent_idx").on(columns.parent),
    pathIdx: index("news_rels_path_idx").on(columns.path),
    news_rels_users_id_idx: index("news_rels_users_id_idx").on(columns.usersID),
    news_rels_media_id_idx: index("news_rels_media_id_idx").on(columns.mediaID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [news.id],
      name: "news_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "news_rels_users_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "news_rels_media_fk",
    }).onDelete("cascade"),
  }),
);

export const _news_v = pgTable(
  "_news_v",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    parent: uuid("parent_id").references(() => news.id, {
      onDelete: "set null",
    }),
    version_title: varchar("version_title"),
    version_content: jsonb("version_content"),
    version_isPublished: boolean("version_is_published").default(true),
    version_publishedDate: timestamp("version_published_date", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version_excerpt: varchar("version_excerpt"),
    version_updatedAt: timestamp("version_updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp("version_created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version__status:
      enum__news_v_version_status("version__status").default("draft"),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    latest: boolean("latest"),
    autosave: boolean("autosave"),
  },
  (columns) => ({
    _news_v_parent_idx: index("_news_v_parent_idx").on(columns.parent),
    _news_v_version_version_updated_at_idx: index(
      "_news_v_version_version_updated_at_idx",
    ).on(columns.version_updatedAt),
    _news_v_version_version_created_at_idx: index(
      "_news_v_version_version_created_at_idx",
    ).on(columns.version_createdAt),
    _news_v_version_version__status_idx: index(
      "_news_v_version_version__status_idx",
    ).on(columns.version__status),
    _news_v_created_at_idx: index("_news_v_created_at_idx").on(
      columns.createdAt,
    ),
    _news_v_updated_at_idx: index("_news_v_updated_at_idx").on(
      columns.updatedAt,
    ),
    _news_v_latest_idx: index("_news_v_latest_idx").on(columns.latest),
    _news_v_autosave_idx: index("_news_v_autosave_idx").on(columns.autosave),
  }),
);

export const _news_v_rels = pgTable(
  "_news_v_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: uuid("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: uuid("users_id"),
    mediaID: uuid("media_id"),
  },
  (columns) => ({
    order: index("_news_v_rels_order_idx").on(columns.order),
    parentIdx: index("_news_v_rels_parent_idx").on(columns.parent),
    pathIdx: index("_news_v_rels_path_idx").on(columns.path),
    _news_v_rels_users_id_idx: index("_news_v_rels_users_id_idx").on(
      columns.usersID,
    ),
    _news_v_rels_media_id_idx: index("_news_v_rels_media_id_idx").on(
      columns.mediaID,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [_news_v.id],
      name: "_news_v_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "_news_v_rels_users_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "_news_v_rels_media_fk",
    }).onDelete("cascade"),
  }),
);

export const roles = pgTable(
  "roles",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    name: varchar("name").notNull(),
    vorstand: boolean("vorstand").notNull().default(false),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    roles_name_idx: uniqueIndex("roles_name_idx").on(columns.name),
    roles_updated_at_idx: index("roles_updated_at_idx").on(columns.updatedAt),
    roles_created_at_idx: index("roles_created_at_idx").on(columns.createdAt),
  }),
);

export const members = pgTable(
  "members",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    name: varchar("name").notNull(),
    email: varchar("email"),
    phone: varchar("phone"),
    avatar: uuid("avatar_id").references(() => media.id, {
      onDelete: "set null",
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    members_name_idx: uniqueIndex("members_name_idx").on(columns.name),
    members_avatar_idx: index("members_avatar_idx").on(columns.avatar),
    members_updated_at_idx: index("members_updated_at_idx").on(
      columns.updatedAt,
    ),
    members_created_at_idx: index("members_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const members_rels = pgTable(
  "members_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: uuid("parent_id").notNull(),
    path: varchar("path").notNull(),
    rolesID: uuid("roles_id"),
  },
  (columns) => ({
    order: index("members_rels_order_idx").on(columns.order),
    parentIdx: index("members_rels_parent_idx").on(columns.parent),
    pathIdx: index("members_rels_path_idx").on(columns.path),
    members_rels_roles_id_idx: index("members_rels_roles_id_idx").on(
      columns.rolesID,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [members.id],
      name: "members_rels_parent_fk",
    }).onDelete("cascade"),
    rolesIdFk: foreignKey({
      columns: [columns["rolesID"]],
      foreignColumns: [roles.id],
      name: "members_rels_roles_fk",
    }).onDelete("cascade"),
  }),
);

export const teams_schedules_day = pgTable(
  "teams_schedules_day",
  {
    order: integer("order").notNull(),
    parent: varchar("parent_id").notNull(),
    value: enum_teams_schedules_day("value"),
    id: uuid("id").defaultRandom().primaryKey(),
  },
  (columns) => ({
    orderIdx: index("teams_schedules_day_order_idx").on(columns.order),
    parentIdx: index("teams_schedules_day_parent_idx").on(columns.parent),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [teams_schedules.id],
      name: "teams_schedules_day_parent_fk",
    }).onDelete("cascade"),
  }),
);

export const teams_schedules = pgTable(
  "teams_schedules",
  {
    _order: integer("_order").notNull(),
    _parentID: uuid("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    time_startTime: timestamp("time_start_time", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
    time_endTime: timestamp("time_end_time", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
    location: uuid("location_id")
      .notNull()
      .references(() => locations.id, {
        onDelete: "set null",
      }),
  },
  (columns) => ({
    _orderIdx: index("teams_schedules_order_idx").on(columns._order),
    _parentIDIdx: index("teams_schedules_parent_id_idx").on(columns._parentID),
    teams_schedules_location_idx: index("teams_schedules_location_idx").on(
      columns.location,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [teams.id],
      name: "teams_schedules_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const teams = pgTable(
  "teams",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    name: varchar("name").notNull(),
    gender: enum_teams_gender("gender").notNull(),
    age: numeric("age"),
    slug: varchar("slug"),
    league: enum_teams_league("league"),
    sbvvTeam: uuid("sbvv_team_id").references(() => sams_teams.id, {
      onDelete: "set null",
    }),
    description: varchar("description"),
    instagram: varchar("instagram"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    teams_name_idx: uniqueIndex("teams_name_idx").on(columns.name),
    teams_sbvv_team_idx: index("teams_sbvv_team_idx").on(columns.sbvvTeam),
    teams_updated_at_idx: index("teams_updated_at_idx").on(columns.updatedAt),
    teams_created_at_idx: index("teams_created_at_idx").on(columns.createdAt),
  }),
);

export const teams_rels = pgTable(
  "teams_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: uuid("parent_id").notNull(),
    path: varchar("path").notNull(),
    membersID: uuid("members_id"),
    mediaID: uuid("media_id"),
  },
  (columns) => ({
    order: index("teams_rels_order_idx").on(columns.order),
    parentIdx: index("teams_rels_parent_idx").on(columns.parent),
    pathIdx: index("teams_rels_path_idx").on(columns.path),
    teams_rels_members_id_idx: index("teams_rels_members_id_idx").on(
      columns.membersID,
    ),
    teams_rels_media_id_idx: index("teams_rels_media_id_idx").on(
      columns.mediaID,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [teams.id],
      name: "teams_rels_parent_fk",
    }).onDelete("cascade"),
    membersIdFk: foreignKey({
      columns: [columns["membersID"]],
      foreignColumns: [members.id],
      name: "teams_rels_members_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "teams_rels_media_fk",
    }).onDelete("cascade"),
  }),
);

export const locations = pgTable(
  "locations",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    name: varchar("name").notNull(),
    description: varchar("description"),
    address_street: varchar("address_street"),
    address_postalCode: numeric("address_postal_code").default("79379"),
    address_city: varchar("address_city").default("Müllheim"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    locations_updated_at_idx: index("locations_updated_at_idx").on(
      columns.updatedAt,
    ),
    locations_created_at_idx: index("locations_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const sponsors = pgTable(
  "sponsors",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    name: varchar("name").notNull(),
    website: varchar("website"),
    logo: uuid("logo_id").references(() => media.id, {
      onDelete: "set null",
    }),
    expiryDate: timestamp("expiry_date", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    sponsors_name_idx: uniqueIndex("sponsors_name_idx").on(columns.name),
    sponsors_logo_idx: index("sponsors_logo_idx").on(columns.logo),
    sponsors_updated_at_idx: index("sponsors_updated_at_idx").on(
      columns.updatedAt,
    ),
    sponsors_created_at_idx: index("sponsors_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const sams_teams = pgTable(
  "sams_teams",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    nameWithSeries: varchar("name_with_series"),
    name: varchar("name").notNull(),
    uuid: varchar("uuid").notNull(),
    associationUuid: varchar("association_uuid"),
    sportsclubUuid: varchar("sportsclub_uuid"),
    leagueUuid: varchar("league_uuid"),
    leagueName: varchar("league_name"),
    seasonUuid: varchar("season_uuid"),
    seasonName: varchar("season_name"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    sams_teams_uuid_idx: uniqueIndex("sams_teams_uuid_idx").on(columns.uuid),
    sams_teams_updated_at_idx: index("sams_teams_updated_at_idx").on(
      columns.updatedAt,
    ),
    sams_teams_created_at_idx: index("sams_teams_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const sams_clubs = pgTable(
  "sams_clubs",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    name: varchar("name").notNull(),
    sportsclubUuid: varchar("sportsclub_uuid").notNull(),
    logo: varchar("logo"),
    associationUuid: varchar("association_uuid"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    sams_clubs_sportsclub_uuid_idx: uniqueIndex(
      "sams_clubs_sportsclub_uuid_idx",
    ).on(columns.sportsclubUuid),
    sams_clubs_updated_at_idx: index("sams_clubs_updated_at_idx").on(
      columns.updatedAt,
    ),
    sams_clubs_created_at_idx: index("sams_clubs_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const bus_bookings = pgTable(
  "bus_bookings",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    traveler: varchar("traveler"),
    comment: varchar("comment"),
    schedule_start: timestamp("schedule_start", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
    schedule_end: timestamp("schedule_end", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
    booker: uuid("booker_id")
      .notNull()
      .references(() => users.id, {
        onDelete: "set null",
      }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    bus_bookings_booker_idx: index("bus_bookings_booker_idx").on(
      columns.booker,
    ),
    bus_bookings_updated_at_idx: index("bus_bookings_updated_at_idx").on(
      columns.updatedAt,
    ),
    bus_bookings_created_at_idx: index("bus_bookings_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const payload_locked_documents = pgTable(
  "payload_locked_documents",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    globalSlug: varchar("global_slug"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index(
      "payload_locked_documents_global_slug_idx",
    ).on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index(
      "payload_locked_documents_updated_at_idx",
    ).on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index(
      "payload_locked_documents_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_locked_documents_rels = pgTable(
  "payload_locked_documents_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: uuid("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: uuid("users_id"),
    mediaID: uuid("media_id"),
    eventsID: uuid("events_id"),
    newsID: uuid("news_id"),
    rolesID: uuid("roles_id"),
    membersID: uuid("members_id"),
    teamsID: uuid("teams_id"),
    locationsID: uuid("locations_id"),
    sponsorsID: uuid("sponsors_id"),
    "sams-teamsID": uuid("sams_teams_id"),
    "sams-clubsID": uuid("sams_clubs_id"),
    "bus-bookingsID": uuid("bus_bookings_id"),
  },
  (columns) => ({
    order: index("payload_locked_documents_rels_order_idx").on(columns.order),
    parentIdx: index("payload_locked_documents_rels_parent_idx").on(
      columns.parent,
    ),
    pathIdx: index("payload_locked_documents_rels_path_idx").on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      "payload_locked_documents_rels_users_id_idx",
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      "payload_locked_documents_rels_media_id_idx",
    ).on(columns.mediaID),
    payload_locked_documents_rels_events_id_idx: index(
      "payload_locked_documents_rels_events_id_idx",
    ).on(columns.eventsID),
    payload_locked_documents_rels_news_id_idx: index(
      "payload_locked_documents_rels_news_id_idx",
    ).on(columns.newsID),
    payload_locked_documents_rels_roles_id_idx: index(
      "payload_locked_documents_rels_roles_id_idx",
    ).on(columns.rolesID),
    payload_locked_documents_rels_members_id_idx: index(
      "payload_locked_documents_rels_members_id_idx",
    ).on(columns.membersID),
    payload_locked_documents_rels_teams_id_idx: index(
      "payload_locked_documents_rels_teams_id_idx",
    ).on(columns.teamsID),
    payload_locked_documents_rels_locations_id_idx: index(
      "payload_locked_documents_rels_locations_id_idx",
    ).on(columns.locationsID),
    payload_locked_documents_rels_sponsors_id_idx: index(
      "payload_locked_documents_rels_sponsors_id_idx",
    ).on(columns.sponsorsID),
    payload_locked_documents_rels_sams_teams_id_idx: index(
      "payload_locked_documents_rels_sams_teams_id_idx",
    ).on(columns["sams-teamsID"]),
    payload_locked_documents_rels_sams_clubs_id_idx: index(
      "payload_locked_documents_rels_sams_clubs_id_idx",
    ).on(columns["sams-clubsID"]),
    payload_locked_documents_rels_bus_bookings_id_idx: index(
      "payload_locked_documents_rels_bus_bookings_id_idx",
    ).on(columns["bus-bookingsID"]),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_locked_documents.id],
      name: "payload_locked_documents_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_locked_documents_rels_users_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "payload_locked_documents_rels_media_fk",
    }).onDelete("cascade"),
    eventsIdFk: foreignKey({
      columns: [columns["eventsID"]],
      foreignColumns: [events.id],
      name: "payload_locked_documents_rels_events_fk",
    }).onDelete("cascade"),
    newsIdFk: foreignKey({
      columns: [columns["newsID"]],
      foreignColumns: [news.id],
      name: "payload_locked_documents_rels_news_fk",
    }).onDelete("cascade"),
    rolesIdFk: foreignKey({
      columns: [columns["rolesID"]],
      foreignColumns: [roles.id],
      name: "payload_locked_documents_rels_roles_fk",
    }).onDelete("cascade"),
    membersIdFk: foreignKey({
      columns: [columns["membersID"]],
      foreignColumns: [members.id],
      name: "payload_locked_documents_rels_members_fk",
    }).onDelete("cascade"),
    teamsIdFk: foreignKey({
      columns: [columns["teamsID"]],
      foreignColumns: [teams.id],
      name: "payload_locked_documents_rels_teams_fk",
    }).onDelete("cascade"),
    locationsIdFk: foreignKey({
      columns: [columns["locationsID"]],
      foreignColumns: [locations.id],
      name: "payload_locked_documents_rels_locations_fk",
    }).onDelete("cascade"),
    sponsorsIdFk: foreignKey({
      columns: [columns["sponsorsID"]],
      foreignColumns: [sponsors.id],
      name: "payload_locked_documents_rels_sponsors_fk",
    }).onDelete("cascade"),
    "sams-teamsIdFk": foreignKey({
      columns: [columns["sams-teamsID"]],
      foreignColumns: [sams_teams.id],
      name: "payload_locked_documents_rels_sams_teams_fk",
    }).onDelete("cascade"),
    "sams-clubsIdFk": foreignKey({
      columns: [columns["sams-clubsID"]],
      foreignColumns: [sams_clubs.id],
      name: "payload_locked_documents_rels_sams_clubs_fk",
    }).onDelete("cascade"),
    "bus-bookingsIdFk": foreignKey({
      columns: [columns["bus-bookingsID"]],
      foreignColumns: [bus_bookings.id],
      name: "payload_locked_documents_rels_bus_bookings_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_preferences = pgTable(
  "payload_preferences",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    key: varchar("key"),
    value: jsonb("value"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index("payload_preferences_key_idx").on(
      columns.key,
    ),
    payload_preferences_updated_at_idx: index(
      "payload_preferences_updated_at_idx",
    ).on(columns.updatedAt),
    payload_preferences_created_at_idx: index(
      "payload_preferences_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_preferences_rels = pgTable(
  "payload_preferences_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: uuid("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: uuid("users_id"),
  },
  (columns) => ({
    order: index("payload_preferences_rels_order_idx").on(columns.order),
    parentIdx: index("payload_preferences_rels_parent_idx").on(columns.parent),
    pathIdx: index("payload_preferences_rels_path_idx").on(columns.path),
    payload_preferences_rels_users_id_idx: index(
      "payload_preferences_rels_users_id_idx",
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_preferences.id],
      name: "payload_preferences_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_preferences_rels_users_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_migrations = pgTable(
  "payload_migrations",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    name: varchar("name"),
    batch: numeric("batch"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index(
      "payload_migrations_updated_at_idx",
    ).on(columns.updatedAt),
    payload_migrations_created_at_idx: index(
      "payload_migrations_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const relations_users = relations(users, () => ({}));
export const relations_media = relations(media, () => ({}));
export const relations_events_rels = relations(events_rels, ({ one }) => ({
  parent: one(events, {
    fields: [events_rels.parent],
    references: [events.id],
    relationName: "_rels",
  }),
  mediaID: one(media, {
    fields: [events_rels.mediaID],
    references: [media.id],
    relationName: "media",
  }),
  usersID: one(users, {
    fields: [events_rels.usersID],
    references: [users.id],
    relationName: "users",
  }),
}));
export const relations_events = relations(events, ({ many }) => ({
  _rels: many(events_rels, {
    relationName: "_rels",
  }),
}));
export const relations_news_rels = relations(news_rels, ({ one }) => ({
  parent: one(news, {
    fields: [news_rels.parent],
    references: [news.id],
    relationName: "_rels",
  }),
  usersID: one(users, {
    fields: [news_rels.usersID],
    references: [users.id],
    relationName: "users",
  }),
  mediaID: one(media, {
    fields: [news_rels.mediaID],
    references: [media.id],
    relationName: "media",
  }),
}));
export const relations_news = relations(news, ({ many }) => ({
  _rels: many(news_rels, {
    relationName: "_rels",
  }),
}));
export const relations__news_v_rels = relations(_news_v_rels, ({ one }) => ({
  parent: one(_news_v, {
    fields: [_news_v_rels.parent],
    references: [_news_v.id],
    relationName: "_rels",
  }),
  usersID: one(users, {
    fields: [_news_v_rels.usersID],
    references: [users.id],
    relationName: "users",
  }),
  mediaID: one(media, {
    fields: [_news_v_rels.mediaID],
    references: [media.id],
    relationName: "media",
  }),
}));
export const relations__news_v = relations(_news_v, ({ one, many }) => ({
  parent: one(news, {
    fields: [_news_v.parent],
    references: [news.id],
    relationName: "parent",
  }),
  _rels: many(_news_v_rels, {
    relationName: "_rels",
  }),
}));
export const relations_roles = relations(roles, () => ({}));
export const relations_members_rels = relations(members_rels, ({ one }) => ({
  parent: one(members, {
    fields: [members_rels.parent],
    references: [members.id],
    relationName: "_rels",
  }),
  rolesID: one(roles, {
    fields: [members_rels.rolesID],
    references: [roles.id],
    relationName: "roles",
  }),
}));
export const relations_members = relations(members, ({ one, many }) => ({
  avatar: one(media, {
    fields: [members.avatar],
    references: [media.id],
    relationName: "avatar",
  }),
  _rels: many(members_rels, {
    relationName: "_rels",
  }),
}));
export const relations_teams_schedules_day = relations(
  teams_schedules_day,
  ({ one }) => ({
    parent: one(teams_schedules, {
      fields: [teams_schedules_day.parent],
      references: [teams_schedules.id],
      relationName: "day",
    }),
  }),
);
export const relations_teams_schedules = relations(
  teams_schedules,
  ({ one, many }) => ({
    _parentID: one(teams, {
      fields: [teams_schedules._parentID],
      references: [teams.id],
      relationName: "schedules",
    }),
    day: many(teams_schedules_day, {
      relationName: "day",
    }),
    location: one(locations, {
      fields: [teams_schedules.location],
      references: [locations.id],
      relationName: "location",
    }),
  }),
);
export const relations_teams_rels = relations(teams_rels, ({ one }) => ({
  parent: one(teams, {
    fields: [teams_rels.parent],
    references: [teams.id],
    relationName: "_rels",
  }),
  membersID: one(members, {
    fields: [teams_rels.membersID],
    references: [members.id],
    relationName: "members",
  }),
  mediaID: one(media, {
    fields: [teams_rels.mediaID],
    references: [media.id],
    relationName: "media",
  }),
}));
export const relations_teams = relations(teams, ({ one, many }) => ({
  sbvvTeam: one(sams_teams, {
    fields: [teams.sbvvTeam],
    references: [sams_teams.id],
    relationName: "sbvvTeam",
  }),
  schedules: many(teams_schedules, {
    relationName: "schedules",
  }),
  _rels: many(teams_rels, {
    relationName: "_rels",
  }),
}));
export const relations_locations = relations(locations, () => ({}));
export const relations_sponsors = relations(sponsors, ({ one }) => ({
  logo: one(media, {
    fields: [sponsors.logo],
    references: [media.id],
    relationName: "logo",
  }),
}));
export const relations_sams_teams = relations(sams_teams, () => ({}));
export const relations_sams_clubs = relations(sams_clubs, () => ({}));
export const relations_bus_bookings = relations(bus_bookings, ({ one }) => ({
  booker: one(users, {
    fields: [bus_bookings.booker],
    references: [users.id],
    relationName: "booker",
  }),
}));
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
    eventsID: one(events, {
      fields: [payload_locked_documents_rels.eventsID],
      references: [events.id],
      relationName: "events",
    }),
    newsID: one(news, {
      fields: [payload_locked_documents_rels.newsID],
      references: [news.id],
      relationName: "news",
    }),
    rolesID: one(roles, {
      fields: [payload_locked_documents_rels.rolesID],
      references: [roles.id],
      relationName: "roles",
    }),
    membersID: one(members, {
      fields: [payload_locked_documents_rels.membersID],
      references: [members.id],
      relationName: "members",
    }),
    teamsID: one(teams, {
      fields: [payload_locked_documents_rels.teamsID],
      references: [teams.id],
      relationName: "teams",
    }),
    locationsID: one(locations, {
      fields: [payload_locked_documents_rels.locationsID],
      references: [locations.id],
      relationName: "locations",
    }),
    sponsorsID: one(sponsors, {
      fields: [payload_locked_documents_rels.sponsorsID],
      references: [sponsors.id],
      relationName: "sponsors",
    }),
    "sams-teamsID": one(sams_teams, {
      fields: [payload_locked_documents_rels["sams-teamsID"]],
      references: [sams_teams.id],
      relationName: "sams-teams",
    }),
    "sams-clubsID": one(sams_clubs, {
      fields: [payload_locked_documents_rels["sams-clubsID"]],
      references: [sams_clubs.id],
      relationName: "sams-clubs",
    }),
    "bus-bookingsID": one(bus_bookings, {
      fields: [payload_locked_documents_rels["bus-bookingsID"]],
      references: [bus_bookings.id],
      relationName: "bus-bookings",
    }),
  }),
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  }),
);
export const relations_payload_preferences = relations(
  payload_preferences,
  ({ many }) => ({
    _rels: many(payload_preferences_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_migrations = relations(
  payload_migrations,
  () => ({}),
);

type DatabaseSchema = {
  enum_users_role: typeof enum_users_role;
  enum_news_status: typeof enum_news_status;
  enum__news_v_version_status: typeof enum__news_v_version_status;
  enum_teams_schedules_day: typeof enum_teams_schedules_day;
  enum_teams_gender: typeof enum_teams_gender;
  enum_teams_league: typeof enum_teams_league;
  users: typeof users;
  media: typeof media;
  events: typeof events;
  events_rels: typeof events_rels;
  news: typeof news;
  news_rels: typeof news_rels;
  _news_v: typeof _news_v;
  _news_v_rels: typeof _news_v_rels;
  roles: typeof roles;
  members: typeof members;
  members_rels: typeof members_rels;
  teams_schedules_day: typeof teams_schedules_day;
  teams_schedules: typeof teams_schedules;
  teams: typeof teams;
  teams_rels: typeof teams_rels;
  locations: typeof locations;
  sponsors: typeof sponsors;
  sams_teams: typeof sams_teams;
  sams_clubs: typeof sams_clubs;
  bus_bookings: typeof bus_bookings;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  relations_users: typeof relations_users;
  relations_media: typeof relations_media;
  relations_events_rels: typeof relations_events_rels;
  relations_events: typeof relations_events;
  relations_news_rels: typeof relations_news_rels;
  relations_news: typeof relations_news;
  relations__news_v_rels: typeof relations__news_v_rels;
  relations__news_v: typeof relations__news_v;
  relations_roles: typeof relations_roles;
  relations_members_rels: typeof relations_members_rels;
  relations_members: typeof relations_members;
  relations_teams_schedules_day: typeof relations_teams_schedules_day;
  relations_teams_schedules: typeof relations_teams_schedules;
  relations_teams_rels: typeof relations_teams_rels;
  relations_teams: typeof relations_teams;
  relations_locations: typeof relations_locations;
  relations_sponsors: typeof relations_sponsors;
  relations_sams_teams: typeof relations_sams_teams;
  relations_sams_clubs: typeof relations_sams_clubs;
  relations_bus_bookings: typeof relations_bus_bookings;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
};

declare module "@payloadcms/db-postgres" {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
