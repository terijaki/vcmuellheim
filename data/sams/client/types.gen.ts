// This file is auto-generated by @hey-api/openapi-ts

export type ConstraintViolation = {
	constraint?: string;
	property?: string;
	entity?: string;
	invalidValue?: string;
	message?: string;
};

export type ValidationError = {
	violations?: Array<ConstraintViolation>;
};

export type ResponseExceptionMessage = {
	message?: string;
};

export type ResponseException = {
	exception?: string;
	message?: string;
};

export type Association = {
	/**
	 * Entity unique identifier
	 */
	uuid: string;
	_links?: Links;
	_embedded?: Embedded;
	name: string;
	shortname?: string | null;
	parentUuid?: string | null;
	/**
	 * Zero-based hierarchy level for the association. For top-level associations, the level is 0.
	 */
	level?: number | null;
};

export type Embedded = {
	empty?: boolean;
};

export type HalRepresentation = {
	_links?: Links;
	_embedded?: Embedded;
};

export type Links = {
	empty?: boolean;
};

export type AssociationResourcePage = {
	totalElements?: number;
	numberOfElements?: number;
	_links?: Links;
	_embedded?: Embedded;
	content?: Array<Association>;
	empty?: boolean;
	totalPages?: number;
	first?: boolean;
	last?: boolean;
};

/**
 * Address for a location or a person. An address object may be null if no address data is available. For persons this might be the case if the address visibility has been set to private.
 */
export type Address = {
	street?: string | null;
	postcode?: string | null;
	city?: string | null;
	country?: string | null;
	extrafield?: string | null;
	region?: string | null;
	postbox?: string | null;
};

export type Committee = {
	/**
	 * Entity unique identifier
	 */
	uuid?: string;
	_links?: Links;
	_embedded?: Embedded;
	/**
	 * Reference to the association this entity belongs to
	 */
	associationUuid?: string;
	members?: Array<CommitteeMember>;
	name?: string;
	shortname?: string;
	description?: string;
	type?: string;
	imageLink?: string;
};

/**
 * A member of a committee. Personal data may be null if its visibility has been restricted.
 */
export type CommitteeMember = {
	uuid?: string;
	/**
	 * Reference to the committee
	 */
	committeeUuid?: string;
	additionalTitle?: string;
	sourceFunction?: string;
	description?: string;
	firstName?: string;
	lastName?: string;
	email?: string;
	priority?: number;
	address?: Address;
	phoneMobile?: string;
	fax?: string;
	phoneWork?: string;
	faxWork?: string;
	phoneMobileWork?: string;
	portraitPhotoLink?: string;
};

export type CommitteePage = {
	totalElements?: number;
	numberOfElements?: number;
	_links?: Links;
	_embedded?: Embedded;
	content?: Array<Committee>;
	empty?: boolean;
	totalPages?: number;
	first?: boolean;
	last?: boolean;
};

export type SportsclubDto = {
	/**
	 * Entity unique identifier
	 */
	uuid: string;
	_links?: Links;
	_embedded?: Embedded;
	name: string;
	shortname?: string | null;
	sportsclubNumber?: number | null;
	associationUuid?: string | null;
	logoImageLink?: string | null;
};

export type SportsclubPage = {
	totalElements?: number;
	numberOfElements?: number;
	_links?: Links;
	_embedded?: Embedded;
	content?: Array<SportsclubDto>;
	empty?: boolean;
	totalPages?: number;
	first?: boolean;
	last?: boolean;
};

export type LeagueHierarchyDto = {
	/**
	 * Entity unique identifier
	 */
	uuid?: string;
	_links?: Links;
	_embedded?: Embedded;
	name?: string;
	shortName?: string;
	seasonUuid?: string;
	associationUuid?: string;
	level?: number;
	parentLeagueHierarchyUuid?: string;
};

export type LeagueHierarchyPage = {
	totalElements?: number;
	numberOfElements?: number;
	_links?: Links;
	_embedded?: Embedded;
	content?: Array<LeagueHierarchyDto>;
	empty?: boolean;
	totalPages?: number;
	first?: boolean;
	last?: boolean;
};

/**
 * A location comprises the location's name, its address, and its geographical coordinates if available
 */
export type Location = {
	/**
	 * Location unique identifier
	 */
	uuid?: string | null;
	_links?: Links;
	_embedded?: Embedded;
	name?: string | null;
	longitude?: number | null;
	latitude?: number | null;
	address?: Address;
};

export type LocationResourcePage = {
	totalElements?: number;
	numberOfElements?: number;
	_links?: Links;
	_embedded?: Embedded;
	content?: Array<Location>;
	empty?: boolean;
	totalPages?: number;
	first?: boolean;
	last?: boolean;
};

export type CompetitionDto = {
	/**
	 * Entity unique identifier
	 */
	uuid?: string;
	_links?: Links;
	_embedded?: Embedded;
	name?: string;
	shortName?: string;
	gender?: "MALE" | "FEMALE" | "MIXED";
	leagueHierarchyUuid?: string;
	seasonUuid?: string;
	associationUuid?: string;
	/**
	 * If this competition is the sub-competition of a super competition then this UUID points to this super competition.
	 */
	superCompetitionUuid?: string;
};

export type CompetitionPage = {
	totalElements?: number;
	numberOfElements?: number;
	_links?: Links;
	_embedded?: Embedded;
	content?: Array<CompetitionDto>;
	empty?: boolean;
	totalPages?: number;
	first?: boolean;
	last?: boolean;
};

export type CompetitionMatchGroupRankingsDto = {
	/**
	 * Entity unique identifier
	 */
	uuid?: string;
	_links?: Links;
	_embedded?: Embedded;
	matchGroupName?: string;
	rankings?: Array<LeagueRankingsEntryDto>;
};

export type CompetitionRankingsResourcePage = {
	totalElements?: number;
	numberOfElements?: number;
	_links?: Links;
	_embedded?: Embedded;
	content?: Array<CompetitionMatchGroupRankingsDto>;
	empty?: boolean;
	totalPages?: number;
	first?: boolean;
	last?: boolean;
};

export type LeagueRankingsEntryDto = {
	/**
	 * Entity unique identifier
	 */
	uuid?: string;
	_links?: Links;
	_embedded?: Embedded;
	teamName?: string | null;
	rank?: number;
	matchesPlayed?: number | null;
	points?: number | null;
	scoreIncludingLosses?: string | null;
	wins?: number | null;
	losses?: number | null;
	setWins?: number | null;
	setLosses?: number | null;
	setDifference?: number | null;
	setRatio?: number | string | null;
	ballWins?: number | null;
	ballLosses?: number | null;
	ballDifference?: number | null;
	ballRatio?: number | string | null;
	resultTypes?: Array<MatchResultTypeCount> | null;
};

export type MatchResultTypeCount = {
	result?: string;
	count?: number;
};

export type TeamDto = {
	/**
	 * Entity unique identifier
	 */
	uuid?: string;
	_links?: Links;
	_embedded?: Embedded;
	masterTeamUuid?: string | null;
	name?: string;
	shortName?: string | null;
	teamNumber?: number | null;
	clubCode?: string | null;
	logoImageLink?: string | null;
	sportsclubUuid?: string | null;
	associationUuid?: string | null;
};

export type TeamPage = {
	totalElements?: number;
	numberOfElements?: number;
	_links?: Links;
	_embedded?: Embedded;
	content?: Array<TeamDto>;
	empty?: boolean;
	totalPages?: number;
	first?: boolean;
	last?: boolean;
};

export type CompetitionMatchDto = {
	/**
	 * Entity unique identifier
	 */
	uuid: string;
	_links?: Links;
	_embedded?: {
		team1?: {
			uuid: string;
			name: string;
			sportsclubUuid: string;
		};
		team2?: {
			uuid: string;
			name: string;
			sportsclubUuid: string;
		};
	} | null;
	date?: string | null;
	time?: string | null;
	matchNumber?: number | null;
	decidingMatch?: boolean | null;
	gameReassessed?: boolean | null;
	host?: string | null;
	referees?: RefereeTeamDto;
	spectators?: number | null;
	netDuration?: number | null;
	verified?: boolean | null;
	location?: Location;
	seasonUuid?: string | null;
	associationUuid?: string | null;
	results?: VolleyballMatchResultsDto;
	matchGroupUuid?: string | null;
	competitionUuid?: string | null;
	delayPossible?: boolean | null;
	indefinitelyRescheduled?: boolean | null;
};

export type CompetitionMatchPage = {
	totalElements?: number;
	numberOfElements?: number;
	_links?: Links;
	_embedded?: Embedded;
	content?: Array<CompetitionMatchDto>;
	empty?: boolean;
	totalPages?: number;
	first?: boolean;
	last?: boolean;
};

export type RefereeTeamDto = {
	firstReferee?: string | null;
	secondReferee?: string | null;
	challengeReferee?: string | null;
};

export type VolleyballMatchResultsDto = {
	winner?: string | null;
	winnerName?: string | null;
	setPoints?: string | null;
	ballPoints?: string | null;
	sets?: Array<VolleyballMatchSetRestDto> | null;
};

export type VolleyballMatchSetRestDto = {
	number?: number;
	ballPoints?: string;
	winner?: string;
	winnerName?: string;
	duration?: number;
};

export type CompetitionMatchGroupDto = {
	/**
	 * Entity unique identifier
	 */
	uuid?: string;
	_links?: Links;
	_embedded?: Embedded;
	name?: string;
	tourneyLevel?: number;
	seasonUuid?: string;
	competitionUuid?: string;
	associationUuid?: string;
};

export type CompetitionMatchGroupPage = {
	totalElements?: number;
	numberOfElements?: number;
	_links?: Links;
	_embedded?: Embedded;
	content?: Array<CompetitionMatchGroupDto>;
	empty?: boolean;
	totalPages?: number;
	first?: boolean;
	last?: boolean;
};

export type LeagueDto = {
	/**
	 * Entity unique identifier
	 */
	uuid?: string;
	_links?: Links;
	_embedded?: Embedded;
	name?: string;
	shortName?: string;
	gender?: "MALE" | "FEMALE" | "MIXED";
	leagueHierarchyUuid?: string;
	seasonUuid?: string;
	associationUuid?: string;
};

export type LeaguePage = {
	totalElements?: number;
	numberOfElements?: number;
	_links?: Links;
	_embedded?: Embedded;
	content?: Array<LeagueDto>;
	empty?: boolean;
	totalPages?: number;
	first?: boolean;
	last?: boolean;
};

export type LeagueRankingsResourcePage = {
	totalElements?: number;
	numberOfElements?: number;
	_links?: Links;
	_embedded?: Embedded;
	content?: Array<LeagueRankingsEntryDto>;
	empty?: boolean;
	totalPages?: number;
	first?: boolean;
	last?: boolean;
};

export type LeagueMatchDto = {
	/**
	 * Entity unique identifier
	 */
	uuid: string;
	_links?: Links;
	_embedded?: {
		team1?: {
			uuid: string;
			name: string;
			sportsclubUuid: string;
		};
		team2?: {
			uuid: string;
			name: string;
			sportsclubUuid: string;
		};
	} | null;
	date?: string | null;
	time?: string | null;
	matchNumber?: number | null;
	decidingMatch?: boolean | null;
	gameReassessed?: boolean | null;
	host?: string | null;
	referees?: RefereeTeamDto;
	spectators?: number | null;
	netDuration?: number | null;
	verified?: boolean | null;
	location?: Location;
	seasonUuid?: string | null;
	associationUuid?: string | null;
	results?: VolleyballMatchResultsDto;
	matchDayUuid?: string | null;
	leagueUuid?: string | null;
	delayPossible?: boolean | null;
	indefinitelyRescheduled?: boolean | null;
};

export type LeagueMatchPage = {
	totalElements?: number;
	numberOfElements?: number;
	_links?: Links;
	_embedded?: Embedded;
	content?: Array<LeagueMatchDto>;
	empty?: boolean;
	totalPages?: number;
	first?: boolean;
	last?: boolean;
};

export type LeagueMatchDayDto = {
	/**
	 * Entity unique identifier
	 */
	uuid?: string;
	_links?: Links;
	_embedded?: Embedded;
	name?: string;
	matchdate?: string;
	seasonUuid?: string;
	leagueUuid?: string;
	associationUuid?: string;
};

export type LeagueMatchDayPage = {
	totalElements?: number;
	numberOfElements?: number;
	_links?: Links;
	_embedded?: Embedded;
	content?: Array<LeagueMatchDayDto>;
	empty?: boolean;
	totalPages?: number;
	first?: boolean;
	last?: boolean;
};

export type SuperCompetitionDto = {
	/**
	 * Entity unique identifier
	 */
	uuid?: string;
	_links?: Links;
	_embedded?: Embedded;
	name?: string;
	shortName?: string;
	gender?: "MALE" | "FEMALE" | "MIXED";
	leagueHierarchyUuid?: string;
	seasonUuid?: string;
	associationUuid?: string;
	/**
	 * If this competition is the sub-competition of a super competition then this UUID points to this super competition.
	 */
	superCompetitionUuid?: string;
};

export type SuperCompetitionPage = {
	totalElements?: number;
	numberOfElements?: number;
	_links?: Links;
	_embedded?: Embedded;
	content?: Array<SuperCompetitionDto>;
	empty?: boolean;
	totalPages?: number;
	first?: boolean;
	last?: boolean;
};

export type Event = {
	/**
	 * Event unique identifier
	 */
	uuid?: string;
	_links?: Links;
	_embedded?: Embedded;
	name?: string;
	shortname?: string;
	eventNumber?: number;
	overridingEventNumber?: string;
	/**
	 * True if no start and end date has been set yet
	 */
	dateNotYetKnown?: boolean;
	endsAt?: string;
	/**
	 * Start date for an event. Is null if dateNotYetKnown is true
	 */
	beginsAt?: string;
	registrationDeadline?: string;
	associationUuid?: string;
	/**
	 * True if the event has been canceled
	 */
	canceled?: boolean;
	minimumNumberOfParticipants?: number;
	maximumNumberOfParticipants?: number;
	/**
	 * Number of registered participants for an event. If this event is a subordinate event, i.e. there is a higher level event, then this value is calculated as the sum of all participants of the higher level event and all participants of this higher level event's subordinate event. If this event has subordinate events, then this value is calculated as the sum of participants of this event and all its subordinate events.
	 */
	usedCapacity?: number;
	registrationUri?: string;
	location?: Location;
	/**
	 * Reference to the type details for this event
	 */
	eventTypeUuid?: string;
};

export type EventPage = {
	totalElements?: number;
	numberOfElements?: number;
	_links?: Links;
	_embedded?: Embedded;
	content?: Array<Event>;
	empty?: boolean;
	totalPages?: number;
	first?: boolean;
	last?: boolean;
};

/**
 * Type of an event.
 */
export type EventType = {
	/**
	 * Entity unique identifier
	 */
	uuid?: string;
	_links?: Links;
	_embedded?: Embedded;
	name?: string;
	description?: string;
	category?: string;
	associationUuid?: string;
};

export type SeasonDto = Array<{
	/**
	 * Entity unique identifier
	 */
	uuid: string;
	_links?: Links;
	_embedded?: Embedded;
	name: string;
	startDate: string;
	endDate: string;
	currentSeason: boolean;
}>;

export type UserDetailsDto = {
	/**
	 * Entity unique identifier
	 */
	uuid?: string;
	_links?: Links;
	_embedded?: Embedded;
	firstName?: string;
	lastName?: string;
	dateOfBirth?: string;
	gender?: "UNDEFINED" | "MALE" | "FEMALE" | "DIVERS";
	emailAddress?: string;
	samsInstance?: string;
	refsoftID?: string;
};

export type GetApiBaseLinksData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path?: never;
	query?: never;
	url: "/";
};

export type GetApiBaseLinksErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetApiBaseLinksError = GetApiBaseLinksErrors[keyof GetApiBaseLinksErrors];

export type GetAssociationByUuidData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		/**
		 * UUID of the requested association
		 */
		uuid: string;
	};
	query?: never;
	url: "/associations/{uuid}";
};

export type GetAssociationByUuidErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetAssociationByUuidError = GetAssociationByUuidErrors[keyof GetAssociationByUuidErrors];

export type GetAssociationByUuidResponses = {
	/**
	 * Successful operation
	 */
	200: Association;
};

export type GetAssociationByUuidResponse = GetAssociationByUuidResponses[keyof GetAssociationByUuidResponses];

export type GetAssociationsData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path?: never;
	query?: {
		/**
		 * Requested page number. Defaults to the first page (i.e. page number 0).
		 */
		page?: number;
		/**
		 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
		 */
		size?: number;
		/**
		 * Filter for association using the given UUID. Defaults to no filtering.
		 */
		association?: string;
	};
	url: "/associations";
};

export type GetAssociationsErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetAssociationsError = GetAssociationsErrors[keyof GetAssociationsErrors];

export type GetAssociationsResponses = {
	/**
	 * Successful operation
	 */
	200: AssociationResourcePage;
};

export type GetAssociationsResponse = GetAssociationsResponses[keyof GetAssociationsResponses];

export type GetCommitteesForAssociationData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		/**
		 * UUID of the association whose committees are requested
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Requested page number. Defaults to the first page (i.e. page number 0).
		 */
		page?: number;
		/**
		 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
		 */
		size?: number;
	};
	url: "/associations/{uuid}/committees";
};

export type GetCommitteesForAssociationErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetCommitteesForAssociationError =
	GetCommitteesForAssociationErrors[keyof GetCommitteesForAssociationErrors];

export type GetCommitteesForAssociationResponses = {
	/**
	 * Successful operation
	 */
	200: CommitteePage;
};

export type GetCommitteesForAssociationResponse =
	GetCommitteesForAssociationResponses[keyof GetCommitteesForAssociationResponses];

export type GetSportsclubsForAssociationData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		/**
		 * UUID of the association whose committees are requested
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Requested page number. Defaults to the first page (i.e. page number 0).
		 */
		page?: number;
		/**
		 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
		 */
		size?: number;
	};
	url: "/associations/{uuid}/sportsclubs";
};

export type GetSportsclubsForAssociationErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetSportsclubsForAssociationError =
	GetSportsclubsForAssociationErrors[keyof GetSportsclubsForAssociationErrors];

export type GetSportsclubsForAssociationResponses = {
	/**
	 * Successful operation
	 */
	200: SportsclubPage;
};

export type GetSportsclubsForAssociationResponse =
	GetSportsclubsForAssociationResponses[keyof GetSportsclubsForAssociationResponses];

export type GetAllCommitteesData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path?: never;
	query?: {
		/**
		 * Requested page number. Defaults to the first page (i.e. page number 0).
		 */
		page?: number;
		/**
		 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
		 */
		size?: number;
	};
	url: "/committees";
};

export type GetAllCommitteesErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetAllCommitteesError = GetAllCommitteesErrors[keyof GetAllCommitteesErrors];

export type GetAllCommitteesResponses = {
	/**
	 * Successful operation
	 */
	200: CommitteePage;
};

export type GetAllCommitteesResponse = GetAllCommitteesResponses[keyof GetAllCommitteesResponses];

export type GetCommitteeData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		uuid: string;
	};
	query?: never;
	url: "/committees/{uuid}";
};

export type GetCommitteeErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetCommitteeError = GetCommitteeErrors[keyof GetCommitteeErrors];

export type GetCommitteeResponses = {
	/**
	 * Successful operation
	 */
	200: Committee;
};

export type GetCommitteeResponse = GetCommitteeResponses[keyof GetCommitteeResponses];

export type GetAllLeagueHierarchiesData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path?: never;
	query?: {
		/**
		 * Requested page number. Defaults to the first page (i.e. page number 0).
		 */
		page?: number;
		/**
		 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
		 */
		size?: number;
		/**
		 * Filter for the season. UUID of the season to which the league hierarchy belongs.
		 */
		"for-season"?: string;
		/**
		 * Filter for association using the given UUID. Defaults to no filtering.
		 */
		association?: string;
	};
	url: "/league-hierarchies";
};

export type GetAllLeagueHierarchiesErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetAllLeagueHierarchiesError = GetAllLeagueHierarchiesErrors[keyof GetAllLeagueHierarchiesErrors];

export type GetAllLeagueHierarchiesResponses = {
	/**
	 * Successful operation
	 */
	200: LeagueHierarchyPage;
};

export type GetAllLeagueHierarchiesResponse = GetAllLeagueHierarchiesResponses[keyof GetAllLeagueHierarchiesResponses];

export type GetCompetitionsByLeagueHierarchyData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		uuid: string;
	};
	query?: {
		/**
		 * Requested page number. Defaults to the first page (i.e. page number 0).
		 */
		page?: number;
		/**
		 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
		 */
		size?: number;
	};
	url: "/league-hierarchies/{uuid}/competitions";
};

export type GetCompetitionsByLeagueHierarchyErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetCompetitionsByLeagueHierarchyError =
	GetCompetitionsByLeagueHierarchyErrors[keyof GetCompetitionsByLeagueHierarchyErrors];

export type GetLeagueHierarchyByUuidData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		uuid: string;
	};
	query?: never;
	url: "/league-hierarchies/{uuid}";
};

export type GetLeagueHierarchyByUuidErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetLeagueHierarchyByUuidError = GetLeagueHierarchyByUuidErrors[keyof GetLeagueHierarchyByUuidErrors];

export type GetLeagueHierarchyByUuidResponses = {
	/**
	 * Successful operation
	 */
	200: LeagueHierarchyDto;
};

export type GetLeagueHierarchyByUuidResponse =
	GetLeagueHierarchyByUuidResponses[keyof GetLeagueHierarchyByUuidResponses];

export type GetLeaguesByLeagueHierarchyData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		uuid: string;
	};
	query?: {
		/**
		 * Requested page number. Defaults to the first page (i.e. page number 0).
		 */
		page?: number;
		/**
		 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
		 */
		size?: number;
	};
	url: "/league-hierarchies/{uuid}/leagues";
};

export type GetLeaguesByLeagueHierarchyErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetLeaguesByLeagueHierarchyError =
	GetLeaguesByLeagueHierarchyErrors[keyof GetLeaguesByLeagueHierarchyErrors];

export type GetSuperCompetitionsByLeagueHierarchyData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		uuid: string;
	};
	query?: {
		/**
		 * Requested page number. Defaults to the first page (i.e. page number 0).
		 */
		page?: number;
		/**
		 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
		 */
		size?: number;
	};
	url: "/league-hierarchies/{uuid}/super-competitions";
};

export type GetSuperCompetitionsByLeagueHierarchyErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetSuperCompetitionsByLeagueHierarchyError =
	GetSuperCompetitionsByLeagueHierarchyErrors[keyof GetSuperCompetitionsByLeagueHierarchyErrors];

export type GetAllLocationsData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path?: never;
	query?: {
		/**
		 * Requested page number. Defaults to the first page (i.e. page number 0).
		 */
		page?: number;
		/**
		 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
		 */
		size?: number;
	};
	url: "/locations";
};

export type GetAllLocationsErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetAllLocationsError = GetAllLocationsErrors[keyof GetAllLocationsErrors];

export type GetAllLocationsResponses = {
	/**
	 * Success
	 */
	default: LocationResourcePage;
};

export type GetAllLocationsResponse = GetAllLocationsResponses[keyof GetAllLocationsResponses];

export type GetLocationByUuidData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		uuid: string;
	};
	query?: never;
	url: "/locations/{uuid}";
};

export type GetLocationByUuidErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetLocationByUuidError = GetLocationByUuidErrors[keyof GetLocationByUuidErrors];

export type GetLocationByUuidResponses = {
	/**
	 * Success
	 */
	default: Location;
};

export type GetLocationByUuidResponse = GetLocationByUuidResponses[keyof GetLocationByUuidResponses];

export type GetAllCompetitionsData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path?: never;
	query?: {
		/**
		 * Requested page number. Defaults to the first page (i.e. page number 0).
		 */
		page?: number;
		/**
		 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
		 */
		size?: number;
		/**
		 * Filter for association using the given UUID. Defaults to no filtering.
		 */
		association?: string;
	};
	url: "/competitions";
};

export type GetAllCompetitionsErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetAllCompetitionsError = GetAllCompetitionsErrors[keyof GetAllCompetitionsErrors];

export type GetAllCompetitionsResponses = {
	/**
	 * Successful operation
	 */
	200: CompetitionPage;
};

export type GetAllCompetitionsResponse = GetAllCompetitionsResponses[keyof GetAllCompetitionsResponses];

export type GetCompetitionByUuidData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		uuid: string;
	};
	query?: never;
	url: "/competitions/{uuid}";
};

export type GetCompetitionByUuidErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetCompetitionByUuidError = GetCompetitionByUuidErrors[keyof GetCompetitionByUuidErrors];

export type GetCompetitionByUuidResponses = {
	/**
	 * Successful operation
	 */
	200: CompetitionDto;
};

export type GetCompetitionByUuidResponse = GetCompetitionByUuidResponses[keyof GetCompetitionByUuidResponses];

export type GetMatchGroupsForCompetitionData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		uuid: string;
	};
	query?: {
		/**
		 * Requested page number. Defaults to the first page (i.e. page number 0).
		 */
		page?: number;
		/**
		 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
		 */
		size?: number;
	};
	url: "/competitions/{uuid}/match-groups";
};

export type GetMatchGroupsForCompetitionErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetMatchGroupsForCompetitionError =
	GetMatchGroupsForCompetitionErrors[keyof GetMatchGroupsForCompetitionErrors];

export type GetRankingsForCompetitionData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		uuid: string;
	};
	query?: {
		/**
		 * Requested page number. Defaults to the first page (i.e. page number 0).
		 */
		page?: number;
		/**
		 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
		 */
		size?: number;
	};
	url: "/competitions/{uuid}/rankings";
};

export type GetRankingsForCompetitionErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetRankingsForCompetitionError = GetRankingsForCompetitionErrors[keyof GetRankingsForCompetitionErrors];

export type GetRankingsForCompetitionResponses = {
	/**
	 * Successful operation
	 */
	200: CompetitionRankingsResourcePage;
};

export type GetRankingsForCompetitionResponse =
	GetRankingsForCompetitionResponses[keyof GetRankingsForCompetitionResponses];

export type GetTeamsForCompetitionData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		uuid: string;
	};
	query?: {
		/**
		 * Requested page number. Defaults to the first page (i.e. page number 0).
		 */
		page?: number;
		/**
		 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
		 */
		size?: number;
	};
	url: "/competitions/{uuid}/teams";
};

export type GetTeamsForCompetitionErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetTeamsForCompetitionError = GetTeamsForCompetitionErrors[keyof GetTeamsForCompetitionErrors];

export type GetTeamsForCompetitionResponses = {
	/**
	 * Successful operation
	 */
	200: TeamPage;
};

export type GetTeamsForCompetitionResponse = GetTeamsForCompetitionResponses[keyof GetTeamsForCompetitionResponses];

export type GetAllCompetitionMatchesWithFilterData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path?: never;
	query?: {
		/**
		 * Requested page number. Defaults to the first page (i.e. page number 0).
		 */
		page?: number;
		/**
		 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
		 */
		size?: number;
		/**
		 * Filter for association using the given UUID. Defaults to no filtering.
		 */
		association?: string;
		/**
		 * Filter by season UUID: Find all matches from a particular season.
		 */
		"for-season"?: string;
		/**
		 * Filter by competition UUID: Find all matches from a particular competition.
		 */
		"for-competition"?: string;
		/**
		 * Filter by sports club UUID: Find all matches for a particular sports club.
		 */
		"for-sportsclub"?: string;
		/**
		 * Filter by team UUID: Find all matches attended by a particular team.
		 */
		"for-team"?: string;
	};
	url: "/competition-matches";
};

export type GetAllCompetitionMatchesWithFilterErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetAllCompetitionMatchesWithFilterError =
	GetAllCompetitionMatchesWithFilterErrors[keyof GetAllCompetitionMatchesWithFilterErrors];

export type GetAllCompetitionMatchesWithFilterResponses = {
	/**
	 * Successful operation
	 */
	200: CompetitionMatchPage;
};

export type GetAllCompetitionMatchesWithFilterResponse =
	GetAllCompetitionMatchesWithFilterResponses[keyof GetAllCompetitionMatchesWithFilterResponses];

export type GetCompetitionMatchByUuidData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		uuid: string;
	};
	query?: never;
	url: "/competition-matches/{uuid}";
};

export type GetCompetitionMatchByUuidErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetCompetitionMatchByUuidError = GetCompetitionMatchByUuidErrors[keyof GetCompetitionMatchByUuidErrors];

export type GetCompetitionMatchByUuidResponses = {
	/**
	 * Successful operation
	 */
	200: CompetitionMatchDto;
};

export type GetCompetitionMatchByUuidResponse =
	GetCompetitionMatchByUuidResponses[keyof GetCompetitionMatchByUuidResponses];

export type GetAllMatchGroupsData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path?: never;
	query?: {
		/**
		 * Requested page number. Defaults to the first page (i.e. page number 0).
		 */
		page?: number;
		/**
		 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
		 */
		size?: number;
		/**
		 * Filter for association using the given UUID. Defaults to no filtering.
		 */
		association?: string;
	};
	url: "/match-groups";
};

export type GetAllMatchGroupsErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetAllMatchGroupsError = GetAllMatchGroupsErrors[keyof GetAllMatchGroupsErrors];

export type GetAllMatchGroupsResponses = {
	/**
	 * Successful operation
	 */
	200: CompetitionMatchGroupPage;
};

export type GetAllMatchGroupsResponse = GetAllMatchGroupsResponses[keyof GetAllMatchGroupsResponses];

export type GetMatchGroupByUuidData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		uuid: string;
	};
	query?: never;
	url: "/match-groups/{uuid}";
};

export type GetMatchGroupByUuidErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetMatchGroupByUuidError = GetMatchGroupByUuidErrors[keyof GetMatchGroupByUuidErrors];

export type GetMatchGroupByUuidResponses = {
	/**
	 * Successful operation
	 */
	200: CompetitionMatchGroupDto;
};

export type GetMatchGroupByUuidResponse = GetMatchGroupByUuidResponses[keyof GetMatchGroupByUuidResponses];

export type GetMatchesByMatchGroupData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		uuid: string;
	};
	query?: {
		/**
		 * Requested page number. Defaults to the first page (i.e. page number 0).
		 */
		page?: number;
		/**
		 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
		 */
		size?: number;
	};
	url: "/match-groups/{uuid}/competition-matches";
};

export type GetMatchesByMatchGroupErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetMatchesByMatchGroupError = GetMatchesByMatchGroupErrors[keyof GetMatchesByMatchGroupErrors];

export type GetAllLeaguesData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path?: never;
	query?: {
		/**
		 * Requested page number. Defaults to the first page (i.e. page number 0).
		 */
		page?: number;
		/**
		 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
		 */
		size?: number;
		/**
		 * Filter for association using the given UUID. Defaults to no filtering.
		 */
		association?: string;
	};
	url: "/leagues";
};

export type GetAllLeaguesErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetAllLeaguesError = GetAllLeaguesErrors[keyof GetAllLeaguesErrors];

export type GetAllLeaguesResponses = {
	/**
	 * Successful operation
	 */
	200: LeaguePage;
};

export type GetAllLeaguesResponse = GetAllLeaguesResponses[keyof GetAllLeaguesResponses];

export type GetLeagueByUuidData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		uuid: string;
	};
	query?: never;
	url: "/leagues/{uuid}";
};

export type GetLeagueByUuidErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetLeagueByUuidError = GetLeagueByUuidErrors[keyof GetLeagueByUuidErrors];

export type GetLeagueByUuidResponses = {
	/**
	 * Successful operation
	 */
	200: LeagueDto;
};

export type GetLeagueByUuidResponse = GetLeagueByUuidResponses[keyof GetLeagueByUuidResponses];

export type GetMatchDaysForLeagueData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		uuid: string;
	};
	query?: {
		/**
		 * Requested page number. Defaults to the first page (i.e. page number 0).
		 */
		page?: number;
		/**
		 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
		 */
		size?: number;
	};
	url: "/leagues/{uuid}/match-days";
};

export type GetMatchDaysForLeagueErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetMatchDaysForLeagueError = GetMatchDaysForLeagueErrors[keyof GetMatchDaysForLeagueErrors];

export type GetRankingsForLeagueData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		uuid: string;
	};
	query?: {
		/**
		 * Requested page number. Defaults to the first page (i.e. page number 0).
		 */
		page?: number;
		/**
		 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
		 */
		size?: number;
	};
	url: "/leagues/{uuid}/rankings";
};

export type GetRankingsForLeagueErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetRankingsForLeagueError = GetRankingsForLeagueErrors[keyof GetRankingsForLeagueErrors];

export type GetRankingsForLeagueResponses = {
	/**
	 * Successful operation
	 */
	200: LeagueRankingsResourcePage;
};

export type GetRankingsForLeagueResponse = GetRankingsForLeagueResponses[keyof GetRankingsForLeagueResponses];

export type GetTeamsForLeagueData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		uuid: string;
	};
	query?: {
		/**
		 * Requested page number. Defaults to the first page (i.e. page number 0).
		 */
		page?: number;
		/**
		 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
		 */
		size?: number;
	};
	url: "/leagues/{uuid}/teams";
};

export type GetTeamsForLeagueErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetTeamsForLeagueError = GetTeamsForLeagueErrors[keyof GetTeamsForLeagueErrors];

export type GetTeamsForLeagueResponses = {
	/**
	 * Successful operation
	 */
	200: TeamPage;
};

export type GetTeamsForLeagueResponse = GetTeamsForLeagueResponses[keyof GetTeamsForLeagueResponses];

export type GetAllLeagueMatchesData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path?: never;
	query?: {
		/**
		 * Requested page number. Defaults to the first page (i.e. page number 0).
		 */
		page?: number;
		/**
		 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
		 */
		size?: number;
		/**
		 * Filter for association using the given UUID. Defaults to no filtering.
		 */
		association?: string;
		/**
		 * Filter by season UUID: Find all matches from a particular season.
		 */
		"for-season"?: string;
		/**
		 * Filter by league UUID: Find all matches from a particular league.
		 */
		"for-league"?: string;
		/**
		 * Filter by sports club UUID: Find all matches for a particular sports club.
		 */
		"for-sportsclub"?: string;
		/**
		 * Filter by team UUID: Find all matches attended by a particular team.
		 */
		"for-team"?: string;
	};
	url: "/league-matches";
};

export type GetAllLeagueMatchesErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetAllLeagueMatchesError = GetAllLeagueMatchesErrors[keyof GetAllLeagueMatchesErrors];

export type GetAllLeagueMatchesResponses = {
	/**
	 * Successful operation
	 */
	200: LeagueMatchPage;
};

export type GetAllLeagueMatchesResponse = GetAllLeagueMatchesResponses[keyof GetAllLeagueMatchesResponses];

export type GetLeagueMatchByUuidData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		uuid: string;
	};
	query?: never;
	url: "/league-matches/{uuid}";
};

export type GetLeagueMatchByUuidErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetLeagueMatchByUuidError = GetLeagueMatchByUuidErrors[keyof GetLeagueMatchByUuidErrors];

export type GetLeagueMatchByUuidResponses = {
	/**
	 * Successful operation
	 */
	200: LeagueMatchDto;
};

export type GetLeagueMatchByUuidResponse = GetLeagueMatchByUuidResponses[keyof GetLeagueMatchByUuidResponses];

export type GetAllMatchDaysData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path?: never;
	query?: {
		/**
		 * Requested page number. Defaults to the first page (i.e. page number 0).
		 */
		page?: number;
		/**
		 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
		 */
		size?: number;
		/**
		 * Filter for association using the given UUID. Defaults to no filtering.
		 */
		association?: string;
	};
	url: "/match-days";
};

export type GetAllMatchDaysErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetAllMatchDaysError = GetAllMatchDaysErrors[keyof GetAllMatchDaysErrors];

export type GetAllMatchDaysResponses = {
	/**
	 * Successful operation
	 */
	200: LeagueMatchDayPage;
};

export type GetAllMatchDaysResponse = GetAllMatchDaysResponses[keyof GetAllMatchDaysResponses];

export type GetMatchDayByUuidData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		uuid: string;
	};
	query?: never;
	url: "/match-days/{uuid}";
};

export type GetMatchDayByUuidErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetMatchDayByUuidError = GetMatchDayByUuidErrors[keyof GetMatchDayByUuidErrors];

export type GetMatchDayByUuidResponses = {
	/**
	 * Successful operation
	 */
	200: LeagueMatchDayDto;
};

export type GetMatchDayByUuidResponse = GetMatchDayByUuidResponses[keyof GetMatchDayByUuidResponses];

export type GetMatchesByMatchDayData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		uuid: string;
	};
	query?: {
		/**
		 * Requested page number. Defaults to the first page (i.e. page number 0).
		 */
		page?: number;
		/**
		 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
		 */
		size?: number;
	};
	url: "/match-days/{uuid}/league-matches";
};

export type GetMatchesByMatchDayErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetMatchesByMatchDayError = GetMatchesByMatchDayErrors[keyof GetMatchesByMatchDayErrors];

export type GetMatchesByMatchDayResponses = {
	/**
	 * Successful operation
	 */
	200: LeagueMatchPage;
};

export type GetMatchesByMatchDayResponse = GetMatchesByMatchDayResponses[keyof GetMatchesByMatchDayResponses];

export type GetAllSuperCompetitionsData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path?: never;
	query?: {
		/**
		 * Requested page number. Defaults to the first page (i.e. page number 0).
		 */
		page?: number;
		/**
		 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
		 */
		size?: number;
		/**
		 * Filter for association using the given UUID. Defaults to no filtering.
		 */
		association?: string;
	};
	url: "/super-competitions";
};

export type GetAllSuperCompetitionsErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetAllSuperCompetitionsError = GetAllSuperCompetitionsErrors[keyof GetAllSuperCompetitionsErrors];

export type GetAllSuperCompetitionsResponses = {
	/**
	 * Successful operation
	 */
	200: SuperCompetitionPage;
};

export type GetAllSuperCompetitionsResponse = GetAllSuperCompetitionsResponses[keyof GetAllSuperCompetitionsResponses];

export type GetSuperCompetitionByUuidData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		uuid: string;
	};
	query?: never;
	url: "/super-competitions/{uuid}";
};

export type GetSuperCompetitionByUuidErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetSuperCompetitionByUuidError = GetSuperCompetitionByUuidErrors[keyof GetSuperCompetitionByUuidErrors];

export type GetSuperCompetitionByUuidResponses = {
	/**
	 * Successful operation
	 */
	200: SuperCompetitionDto;
};

export type GetSuperCompetitionByUuidResponse =
	GetSuperCompetitionByUuidResponses[keyof GetSuperCompetitionByUuidResponses];

export type GetAllEventsData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path?: never;
	query?: {
		/**
		 * Requested page number. Defaults to the first page (i.e. page number 0).
		 */
		page?: number;
		/**
		 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
		 */
		size?: number;
		/**
		 * Filter for association using the given UUID. Defaults to no filtering.
		 */
		association?: string;
	};
	url: "/events";
};

export type GetAllEventsErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetAllEventsError = GetAllEventsErrors[keyof GetAllEventsErrors];

export type GetAllEventsResponses = {
	/**
	 * Successful operation
	 */
	200: EventPage;
};

export type GetAllEventsResponse = GetAllEventsResponses[keyof GetAllEventsResponses];

export type GetEventByUuidData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		/**
		 * UUID of the requested event
		 */
		uuid: string;
	};
	query?: never;
	url: "/events/{uuid}";
};

export type GetEventByUuidErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetEventByUuidError = GetEventByUuidErrors[keyof GetEventByUuidErrors];

export type GetEventByUuidResponses = {
	/**
	 * Successful operation
	 */
	200: Event;
};

export type GetEventByUuidResponse = GetEventByUuidResponses[keyof GetEventByUuidResponses];

export type GetEventTypeByUuidData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		/**
		 * UUID of the requested event type
		 */
		uuid: string;
	};
	query?: never;
	url: "/event-types/{uuid}";
};

export type GetEventTypeByUuidErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetEventTypeByUuidError = GetEventTypeByUuidErrors[keyof GetEventTypeByUuidErrors];

export type GetEventTypeByUuidResponses = {
	/**
	 * Successful operation
	 */
	200: EventType;
};

export type GetEventTypeByUuidResponse = GetEventTypeByUuidResponses[keyof GetEventTypeByUuidResponses];

export type GetEventTypesData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path?: never;
	query?: {
		/**
		 * Filter for association using the given UUID. Defaults to no filtering.
		 */
		association?: string;
	};
	url: "/event-types";
};

export type GetEventTypesErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetEventTypesError = GetEventTypesErrors[keyof GetEventTypesErrors];

export type GetEventTypesResponses = {
	/**
	 * Successful operation
	 */
	200: EventType;
};

export type GetEventTypesResponse = GetEventTypesResponses[keyof GetEventTypesResponses];

export type GetAllSeasonsData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path?: never;
	query?: never;
	url: "/seasons";
};

export type GetAllSeasonsErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetAllSeasonsError = GetAllSeasonsErrors[keyof GetAllSeasonsErrors];

export type GetAllSeasonsResponses = {
	/**
	 * Successful operation
	 */
	200: SeasonDto;
};

export type GetAllSeasonsResponse = GetAllSeasonsResponses[keyof GetAllSeasonsResponses];

export type GetLeagueHierarchiesForSeasonData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		uuid: string;
	};
	query?: {
		/**
		 * Requested page number. Defaults to the first page (i.e. page number 0).
		 */
		page?: number;
		/**
		 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
		 */
		size?: number;
	};
	url: "/seasons/{uuid}/league-hierarchies";
};

export type GetLeagueHierarchiesForSeasonErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetLeagueHierarchiesForSeasonError =
	GetLeagueHierarchiesForSeasonErrors[keyof GetLeagueHierarchiesForSeasonErrors];

export type GetSeasonByUuidData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		uuid: string;
	};
	query?: never;
	url: "/seasons/{uuid}";
};

export type GetSeasonByUuidErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetSeasonByUuidError = GetSeasonByUuidErrors[keyof GetSeasonByUuidErrors];

export type GetSeasonByUuidResponses = {
	/**
	 * Successful operation
	 */
	200: SeasonDto;
};

export type GetSeasonByUuidResponse = GetSeasonByUuidResponses[keyof GetSeasonByUuidResponses];

export type GetAllSportsclubsData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path?: never;
	query?: {
		/**
		 * Requested page number. Defaults to the first page (i.e. page number 0).
		 */
		page?: number;
		/**
		 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
		 */
		size?: number;
		/**
		 * Filter for association using the given UUID. Defaults to no filtering.
		 */
		association?: string;
	};
	url: "/sportsclubs";
};

export type GetAllSportsclubsErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetAllSportsclubsError = GetAllSportsclubsErrors[keyof GetAllSportsclubsErrors];

export type GetAllSportsclubsResponses = {
	/**
	 * Successful operation
	 */
	200: SportsclubPage;
};

export type GetAllSportsclubsResponse = GetAllSportsclubsResponses[keyof GetAllSportsclubsResponses];

export type GetSportsclubData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		uuid: string;
	};
	query?: never;
	url: "/sportsclubs/{uuid}";
};

export type GetSportsclubErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetSportsclubError = GetSportsclubErrors[keyof GetSportsclubErrors];

export type GetSportsclubResponses = {
	/**
	 * Successful operation
	 */
	200: SportsclubDto;
};

export type GetSportsclubResponse = GetSportsclubResponses[keyof GetSportsclubResponses];

export type GetAllTeamsData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path?: never;
	query?: {
		/**
		 * Requested page number. Defaults to the first page (i.e. page number 0).
		 */
		page?: number;
		/**
		 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
		 */
		size?: number;
		/**
		 * Filter for association using the given UUID. Defaults to no filtering.
		 */
		association?: string;
	};
	url: "/teams";
};

export type GetAllTeamsErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetAllTeamsError = GetAllTeamsErrors[keyof GetAllTeamsErrors];

export type GetAllTeamsResponses = {
	/**
	 * Successful operation
	 */
	200: TeamPage;
};

export type GetAllTeamsResponse = GetAllTeamsResponses[keyof GetAllTeamsResponses];

export type GetTeamByUuidData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path: {
		uuid: string;
	};
	query?: never;
	url: "/teams/{uuid}";
};

export type GetTeamByUuidErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetTeamByUuidError = GetTeamByUuidErrors[keyof GetTeamByUuidErrors];

export type GetTeamByUuidResponses = {
	/**
	 * Successful operation
	 */
	200: TeamDto;
};

export type GetTeamByUuidResponse = GetTeamByUuidResponses[keyof GetTeamByUuidResponses];

export type GetCurrentUserData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path?: never;
	query?: never;
	url: "/user-details/current";
};

export type GetCurrentUserErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type GetCurrentUserError = GetCurrentUserErrors[keyof GetCurrentUserErrors];

export type GetCurrentUserResponses = {
	/**
	 * Successful operation
	 */
	200: UserDetailsDto;
};

export type GetCurrentUserResponse = GetCurrentUserResponses[keyof GetCurrentUserResponses];

export type UserDetailsRootLinksData = {
	body?: never;
	headers?: {
		/**
		 * A SAMS API key with permission to access this API.
		 */
		"X-Api-Key"?: string;
	};
	path?: never;
	query?: never;
	url: "/user-details";
};

export type UserDetailsRootLinksErrors = {
	/**
	 * POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.
	 */
	400: ValidationError;
	/**
	 * API authorization failed.
	 */
	403: ResponseExceptionMessage;
	/**
	 * The request could not be processed due to invalid request data. Check the response for more details.
	 */
	409: ResponseExceptionMessage;
	/**
	 * An unexpected error occurred. Please contact support and supply the response data.
	 */
	500: ResponseException;
};

export type UserDetailsRootLinksError = UserDetailsRootLinksErrors[keyof UserDetailsRootLinksErrors];

export type UserDetailsRootLinksResponses = {
	/**
	 * Successful operation
	 */
	200: HalRepresentation;
};

export type UserDetailsRootLinksResponse = UserDetailsRootLinksResponses[keyof UserDetailsRootLinksResponses];

export type ClientOptions = {
	baseUrl: `${string}://${string}/api/v2/` | (string & {});
};
