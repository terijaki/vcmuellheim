// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "@hey-api/client-next";
import type {
	GetApiBaseLinksData,
	GetApiBaseLinksErrors,
	GetAssociationByUuidData,
	GetAssociationByUuidResponses,
	GetAssociationByUuidErrors,
	GetAssociationsData,
	GetAssociationsResponses,
	GetAssociationsErrors,
	GetCommitteesForAssociationData,
	GetCommitteesForAssociationResponses,
	GetCommitteesForAssociationErrors,
	GetSportsclubsForAssociationData,
	GetSportsclubsForAssociationResponses,
	GetSportsclubsForAssociationErrors,
	GetAllCommitteesData,
	GetAllCommitteesResponses,
	GetAllCommitteesErrors,
	GetCommitteeData,
	GetCommitteeResponses,
	GetCommitteeErrors,
	GetAllLeagueHierarchiesData,
	GetAllLeagueHierarchiesResponses,
	GetAllLeagueHierarchiesErrors,
	GetCompetitionsByLeagueHierarchyData,
	GetCompetitionsByLeagueHierarchyErrors,
	GetLeagueHierarchyByUuidData,
	GetLeagueHierarchyByUuidResponses,
	GetLeagueHierarchyByUuidErrors,
	GetLeaguesByLeagueHierarchyData,
	GetLeaguesByLeagueHierarchyErrors,
	GetSuperCompetitionsByLeagueHierarchyData,
	GetSuperCompetitionsByLeagueHierarchyErrors,
	GetAllLocationsData,
	GetAllLocationsResponses,
	GetAllLocationsErrors,
	GetLocationByUuidData,
	GetLocationByUuidResponses,
	GetLocationByUuidErrors,
	GetAllCompetitionsData,
	GetAllCompetitionsResponses,
	GetAllCompetitionsErrors,
	GetCompetitionByUuidData,
	GetCompetitionByUuidResponses,
	GetCompetitionByUuidErrors,
	GetMatchGroupsForCompetitionData,
	GetMatchGroupsForCompetitionErrors,
	GetRankingsForCompetitionData,
	GetRankingsForCompetitionResponses,
	GetRankingsForCompetitionErrors,
	GetTeamsForCompetitionData,
	GetTeamsForCompetitionResponses,
	GetTeamsForCompetitionErrors,
	GetAllCompetitionMatchesWithFilterData,
	GetAllCompetitionMatchesWithFilterResponses,
	GetAllCompetitionMatchesWithFilterErrors,
	GetCompetitionMatchByUuidData,
	GetCompetitionMatchByUuidResponses,
	GetCompetitionMatchByUuidErrors,
	GetAllMatchGroupsData,
	GetAllMatchGroupsResponses,
	GetAllMatchGroupsErrors,
	GetMatchGroupByUuidData,
	GetMatchGroupByUuidResponses,
	GetMatchGroupByUuidErrors,
	GetMatchesByMatchGroupData,
	GetMatchesByMatchGroupErrors,
	GetAllLeaguesData,
	GetAllLeaguesResponses,
	GetAllLeaguesErrors,
	GetLeagueByUuidData,
	GetLeagueByUuidResponses,
	GetLeagueByUuidErrors,
	GetMatchDaysForLeagueData,
	GetMatchDaysForLeagueErrors,
	GetRankingsForLeagueData,
	GetRankingsForLeagueResponses,
	GetRankingsForLeagueErrors,
	GetTeamsForLeagueData,
	GetTeamsForLeagueResponses,
	GetTeamsForLeagueErrors,
	GetAllLeagueMatchesData,
	GetAllLeagueMatchesResponses,
	GetAllLeagueMatchesErrors,
	GetLeagueMatchByUuidData,
	GetLeagueMatchByUuidResponses,
	GetLeagueMatchByUuidErrors,
	GetAllMatchDaysData,
	GetAllMatchDaysResponses,
	GetAllMatchDaysErrors,
	GetMatchDayByUuidData,
	GetMatchDayByUuidResponses,
	GetMatchDayByUuidErrors,
	GetMatchesByMatchDayData,
	GetMatchesByMatchDayResponses,
	GetMatchesByMatchDayErrors,
	GetAllSuperCompetitionsData,
	GetAllSuperCompetitionsResponses,
	GetAllSuperCompetitionsErrors,
	GetSuperCompetitionByUuidData,
	GetSuperCompetitionByUuidResponses,
	GetSuperCompetitionByUuidErrors,
	GetAllEventsData,
	GetAllEventsResponses,
	GetAllEventsErrors,
	GetEventByUuidData,
	GetEventByUuidResponses,
	GetEventByUuidErrors,
	GetEventTypeByUuidData,
	GetEventTypeByUuidResponses,
	GetEventTypeByUuidErrors,
	GetEventTypesData,
	GetEventTypesResponses,
	GetEventTypesErrors,
	GetAllSeasonsData,
	GetAllSeasonsResponses,
	GetAllSeasonsErrors,
	GetLeagueHierarchiesForSeasonData,
	GetLeagueHierarchiesForSeasonErrors,
	GetSeasonByUuidData,
	GetSeasonByUuidResponses,
	GetSeasonByUuidErrors,
	GetAllSportsclubsData,
	GetAllSportsclubsResponses,
	GetAllSportsclubsErrors,
	GetSportsclubData,
	GetSportsclubResponses,
	GetSportsclubErrors,
	GetAllTeamsData,
	GetAllTeamsResponses,
	GetAllTeamsErrors,
	GetTeamByUuidData,
	GetTeamByUuidResponses,
	GetTeamByUuidErrors,
	GetCurrentUserData,
	GetCurrentUserResponses,
	GetCurrentUserErrors,
	UserDetailsRootLinksData,
	UserDetailsRootLinksResponses,
	UserDetailsRootLinksErrors,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";
import {
	zGetAssociationByUuidResponse,
	zGetAssociationsResponse,
	zGetCommitteesForAssociationResponse,
	zGetSportsclubsForAssociationResponse,
	zGetAllCommitteesResponse,
	zGetCommitteeResponse,
	zGetAllLeagueHierarchiesResponse,
	zGetLeagueHierarchyByUuidResponse,
	zGetAllLocationsResponse,
	zGetLocationByUuidResponse,
	zGetAllCompetitionsResponse,
	zGetCompetitionByUuidResponse,
	zGetRankingsForCompetitionResponse,
	zGetTeamsForCompetitionResponse,
	zGetAllCompetitionMatchesWithFilterResponse,
	zGetCompetitionMatchByUuidResponse,
	zGetAllMatchGroupsResponse,
	zGetMatchGroupByUuidResponse,
	zGetAllLeaguesResponse,
	zGetLeagueByUuidResponse,
	zGetRankingsForLeagueResponse,
	zGetTeamsForLeagueResponse,
	zGetAllLeagueMatchesResponse,
	zGetLeagueMatchByUuidResponse,
	zGetAllMatchDaysResponse,
	zGetMatchDayByUuidResponse,
	zGetMatchesByMatchDayResponse,
	zGetAllSuperCompetitionsResponse,
	zGetSuperCompetitionByUuidResponse,
	zGetAllEventsResponse,
	zGetEventByUuidResponse,
	zGetEventTypeByUuidResponse,
	zGetEventTypesResponse,
	zGetAllSeasonsResponse,
	zGetSeasonByUuidResponse,
	zGetAllSportsclubsResponse,
	zGetSportsclubResponse,
	zGetAllTeamsResponse,
	zGetTeamByUuidResponse,
	zGetCurrentUserResponse,
	zUserDetailsRootLinksResponse,
} from "./zod.gen";

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<
	TData,
	ThrowOnError
> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Links to the API's resources
 */
export const getApiBaseLinks = <ThrowOnError extends boolean = false>(
	options?: Options<GetApiBaseLinksData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<unknown, GetApiBaseLinksErrors, ThrowOnError>({
		url: "/",
		...options,
	});
};

/**
 * Returns an association identified by the given UUID
 */
export const getAssociationByUuid = <ThrowOnError extends boolean = false>(
	options: Options<GetAssociationByUuidData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<GetAssociationByUuidResponses, GetAssociationByUuidErrors, ThrowOnError>(
		{
			responseValidator: async (data) => {
				return await zGetAssociationByUuidResponse.parseAsync(data);
			},
			url: "/associations/{uuid}",
			...options,
		},
	);
};

/**
 * Returns all available associations.
 * Returns all available association as a paged list. The default page size is 20. The page size must not be greater than 100
 */
export const getAssociations = <ThrowOnError extends boolean = false>(
	options?: Options<GetAssociationsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<GetAssociationsResponses, GetAssociationsErrors, ThrowOnError>({
		responseValidator: async (data) => {
			return await zGetAssociationsResponse.parseAsync(data);
		},
		url: "/associations",
		...options,
	});
};

/**
 * Returns the list of committees.
 * Returns the list of committees for an association as a paged list. The default page size is The returned committees list their respective members including the members' publicly available contact information.20. The page size must not be greater than 100
 */
export const getCommitteesForAssociation = <ThrowOnError extends boolean = false>(
	options: Options<GetCommitteesForAssociationData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetCommitteesForAssociationResponses,
		GetCommitteesForAssociationErrors,
		ThrowOnError
	>({
		responseValidator: async (data) => {
			return await zGetCommitteesForAssociationResponse.parseAsync(data);
		},
		url: "/associations/{uuid}/committees",
		...options,
	});
};

/**
 * Returns the list of sportsclubs belonging to the association identified by the specified UUID as a paged list. The default page size is 20. The page size must not be greater than 100
 */
export const getSportsclubsForAssociation = <ThrowOnError extends boolean = false>(
	options: Options<GetSportsclubsForAssociationData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetSportsclubsForAssociationResponses,
		GetSportsclubsForAssociationErrors,
		ThrowOnError
	>({
		responseValidator: async (data) => {
			return await zGetSportsclubsForAssociationResponse.parseAsync(data);
		},
		url: "/associations/{uuid}/sportsclubs",
		...options,
	});
};

/**
 * Returns the list of available committees as a paged list.
 * Returns all committees belonging to the association which can be accessed with the used API key. The returned committees list their respective members including the members' publicly available contact information. The default page size is 20. The page size must not be greater than 100
 */
export const getAllCommittees = <ThrowOnError extends boolean = false>(
	options?: Options<GetAllCommitteesData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<GetAllCommitteesResponses, GetAllCommitteesErrors, ThrowOnError>({
		responseValidator: async (data) => {
			return await zGetAllCommitteesResponse.parseAsync(data);
		},
		url: "/committees",
		...options,
	});
};

/**
 * Returns a committee identified by the given UUID
 * Returns the requested committee if it belongs to the association which can be accessed with the used API key. The returned committee lists its respective members including the members' publicly available contact information.
 */
export const getCommittee = <ThrowOnError extends boolean = false>(
	options: Options<GetCommitteeData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<GetCommitteeResponses, GetCommitteeErrors, ThrowOnError>({
		responseValidator: async (data) => {
			return await zGetCommitteeResponse.parseAsync(data);
		},
		url: "/committees/{uuid}",
		...options,
	});
};

/**
 * Returns all available league hierarchy elements as a paged list.
 * The default page size is 20. The page size must not be greater than 100. The result list can be filtered for a particular season.
 */
export const getAllLeagueHierarchies = <ThrowOnError extends boolean = false>(
	options?: Options<GetAllLeagueHierarchiesData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetAllLeagueHierarchiesResponses,
		GetAllLeagueHierarchiesErrors,
		ThrowOnError
	>({
		responseValidator: async (data) => {
			return await zGetAllLeagueHierarchiesResponse.parseAsync(data);
		},
		url: "/league-hierarchies",
		...options,
	});
};

export const getCompetitionsByLeagueHierarchy = <ThrowOnError extends boolean = false>(
	options: Options<GetCompetitionsByLeagueHierarchyData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<unknown, GetCompetitionsByLeagueHierarchyErrors, ThrowOnError>({
		url: "/league-hierarchies/{uuid}/competitions",
		...options,
	});
};

/**
 * Returns a league hierarchy element identified by the given UUID
 */
export const getLeagueHierarchyByUuid = <ThrowOnError extends boolean = false>(
	options: Options<GetLeagueHierarchyByUuidData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetLeagueHierarchyByUuidResponses,
		GetLeagueHierarchyByUuidErrors,
		ThrowOnError
	>({
		responseValidator: async (data) => {
			return await zGetLeagueHierarchyByUuidResponse.parseAsync(data);
		},
		url: "/league-hierarchies/{uuid}",
		...options,
	});
};

export const getLeaguesByLeagueHierarchy = <ThrowOnError extends boolean = false>(
	options: Options<GetLeaguesByLeagueHierarchyData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<unknown, GetLeaguesByLeagueHierarchyErrors, ThrowOnError>({
		url: "/league-hierarchies/{uuid}/leagues",
		...options,
	});
};

export const getSuperCompetitionsByLeagueHierarchy = <ThrowOnError extends boolean = false>(
	options: Options<GetSuperCompetitionsByLeagueHierarchyData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<unknown, GetSuperCompetitionsByLeagueHierarchyErrors, ThrowOnError>({
		url: "/league-hierarchies/{uuid}/super-competitions",
		...options,
	});
};

/**
 * Returns all available locations as a paged list.
 * The default page size is 20. The page size must not be greater than 100
 */
export const getAllLocations = <ThrowOnError extends boolean = false>(
	options?: Options<GetAllLocationsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<GetAllLocationsResponses, GetAllLocationsErrors, ThrowOnError>({
		responseValidator: async (data) => {
			return await zGetAllLocationsResponse.parseAsync(data);
		},
		url: "/locations",
		...options,
	});
};

/**
 * Returns a location element identified by the given UUID
 * Returns a location element identified by the given UUID
 */
export const getLocationByUuid = <ThrowOnError extends boolean = false>(
	options: Options<GetLocationByUuidData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<GetLocationByUuidResponses, GetLocationByUuidErrors, ThrowOnError>({
		responseValidator: async (data) => {
			return await zGetLocationByUuidResponse.parseAsync(data);
		},
		url: "/locations/{uuid}",
		...options,
	});
};

/**
 * Returns all available competitions as a paged list.
 * The default page size is 20. The page size must not be greater than 100
 */
export const getAllCompetitions = <ThrowOnError extends boolean = false>(
	options?: Options<GetAllCompetitionsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<GetAllCompetitionsResponses, GetAllCompetitionsErrors, ThrowOnError>({
		responseValidator: async (data) => {
			return await zGetAllCompetitionsResponse.parseAsync(data);
		},
		url: "/competitions",
		...options,
	});
};

/**
 * Returns a competition identified by the given UUID
 */
export const getCompetitionByUuid = <ThrowOnError extends boolean = false>(
	options: Options<GetCompetitionByUuidData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<GetCompetitionByUuidResponses, GetCompetitionByUuidErrors, ThrowOnError>(
		{
			responseValidator: async (data) => {
				return await zGetCompetitionByUuidResponse.parseAsync(data);
			},
			url: "/competitions/{uuid}",
			...options,
		},
	);
};

export const getMatchGroupsForCompetition = <ThrowOnError extends boolean = false>(
	options: Options<GetMatchGroupsForCompetitionData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<unknown, GetMatchGroupsForCompetitionErrors, ThrowOnError>({
		url: "/competitions/{uuid}/match-groups",
		...options,
	});
};

/**
 * Returns the rankings of a competition identified by the given UUID.
 */
export const getRankingsForCompetition = <ThrowOnError extends boolean = false>(
	options: Options<GetRankingsForCompetitionData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetRankingsForCompetitionResponses,
		GetRankingsForCompetitionErrors,
		ThrowOnError
	>({
		responseValidator: async (data) => {
			return await zGetRankingsForCompetitionResponse.parseAsync(data);
		},
		url: "/competitions/{uuid}/rankings",
		...options,
	});
};

/**
 * Returns all teams of a competition identified by the given UUID as a paged list.
 * The default page size is 20. The page size must not be greater than 100
 */
export const getTeamsForCompetition = <ThrowOnError extends boolean = false>(
	options: Options<GetTeamsForCompetitionData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetTeamsForCompetitionResponses,
		GetTeamsForCompetitionErrors,
		ThrowOnError
	>({
		responseValidator: async (data) => {
			return await zGetTeamsForCompetitionResponse.parseAsync(data);
		},
		url: "/competitions/{uuid}/teams",
		...options,
	});
};

/**
 * Returns all available competition matches as a paged list.
 * The default page size is 20. The page size must not be greater than 100. The result list can be filtered for a particular season, competition, sports club, or team by passing the UUID of the entity for which to filter as a filter query parameter. The filters will be combined with AND semantics.
 */
export const getAllCompetitionMatchesWithFilter = <ThrowOnError extends boolean = false>(
	options?: Options<GetAllCompetitionMatchesWithFilterData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetAllCompetitionMatchesWithFilterResponses,
		GetAllCompetitionMatchesWithFilterErrors,
		ThrowOnError
	>({
		responseValidator: async (data) => {
			return await zGetAllCompetitionMatchesWithFilterResponse.parseAsync(data);
		},
		url: "/competition-matches",
		...options,
	});
};

/**
 * Returns a competition match identified by the given UUID
 */
export const getCompetitionMatchByUuid = <ThrowOnError extends boolean = false>(
	options: Options<GetCompetitionMatchByUuidData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetCompetitionMatchByUuidResponses,
		GetCompetitionMatchByUuidErrors,
		ThrowOnError
	>({
		responseValidator: async (data) => {
			return await zGetCompetitionMatchByUuidResponse.parseAsync(data);
		},
		url: "/competition-matches/{uuid}",
		...options,
	});
};

/**
 * Returns all available match groups as a paged list. The default page size is 20. The page size must not be greater than 100
 */
export const getAllMatchGroups = <ThrowOnError extends boolean = false>(
	options?: Options<GetAllMatchGroupsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<GetAllMatchGroupsResponses, GetAllMatchGroupsErrors, ThrowOnError>({
		responseValidator: async (data) => {
			return await zGetAllMatchGroupsResponse.parseAsync(data);
		},
		url: "/match-groups",
		...options,
	});
};

/**
 * Returns a match group identified by the given UUID
 */
export const getMatchGroupByUuid = <ThrowOnError extends boolean = false>(
	options: Options<GetMatchGroupByUuidData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<GetMatchGroupByUuidResponses, GetMatchGroupByUuidErrors, ThrowOnError>({
		responseValidator: async (data) => {
			return await zGetMatchGroupByUuidResponse.parseAsync(data);
		},
		url: "/match-groups/{uuid}",
		...options,
	});
};

export const getMatchesByMatchGroup = <ThrowOnError extends boolean = false>(
	options: Options<GetMatchesByMatchGroupData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<unknown, GetMatchesByMatchGroupErrors, ThrowOnError>({
		url: "/match-groups/{uuid}/competition-matches",
		...options,
	});
};

/**
 * Returns all available leagues as a paged list. The default page size is 20. The page size must not be greater than 100
 */
export const getAllLeagues = <ThrowOnError extends boolean = false>(
	options?: Options<GetAllLeaguesData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<GetAllLeaguesResponses, GetAllLeaguesErrors, ThrowOnError>({
		responseValidator: async (data) => {
			return await zGetAllLeaguesResponse.parseAsync(data);
		},
		url: "/leagues",
		...options,
	});
};

/**
 * Returns a league identified by the given UUID
 */
export const getLeagueByUuid = <ThrowOnError extends boolean = false>(
	options: Options<GetLeagueByUuidData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<GetLeagueByUuidResponses, GetLeagueByUuidErrors, ThrowOnError>({
		responseValidator: async (data) => {
			return await zGetLeagueByUuidResponse.parseAsync(data);
		},
		url: "/leagues/{uuid}",
		...options,
	});
};

export const getMatchDaysForLeague = <ThrowOnError extends boolean = false>(
	options: Options<GetMatchDaysForLeagueData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<unknown, GetMatchDaysForLeagueErrors, ThrowOnError>({
		url: "/leagues/{uuid}/match-days",
		...options,
	});
};

/**
 * Returns the rankings of a league identified by the given UUID.
 */
export const getRankingsForLeague = <ThrowOnError extends boolean = false>(
	options: Options<GetRankingsForLeagueData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<GetRankingsForLeagueResponses, GetRankingsForLeagueErrors, ThrowOnError>(
		{
			responseValidator: async (data) => {
				return await zGetRankingsForLeagueResponse.parseAsync(data);
			},
			url: "/leagues/{uuid}/rankings",
			...options,
		},
	);
};

/**
 * Returns all teams of a league identified by the given UUID as a paged list. The default page size is 20. The page size must not be greater than 100
 */
export const getTeamsForLeague = <ThrowOnError extends boolean = false>(
	options: Options<GetTeamsForLeagueData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<GetTeamsForLeagueResponses, GetTeamsForLeagueErrors, ThrowOnError>({
		responseValidator: async (data) => {
			return await zGetTeamsForLeagueResponse.parseAsync(data);
		},
		url: "/leagues/{uuid}/teams",
		...options,
	});
};

/**
 * Returns all available league matches as a paged list.
 * The default page size is 20. The page size must not be greater than 100. The result list can be filtered for a particular season, league, sports club, or team by passing the UUID of the entity for which to filter as a filter query parameter. The filters will be combined with AND semantics.
 */
export const getAllLeagueMatches = <ThrowOnError extends boolean = false>(
	options?: Options<GetAllLeagueMatchesData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<GetAllLeagueMatchesResponses, GetAllLeagueMatchesErrors, ThrowOnError>({
		responseValidator: async (data) => {
			return await zGetAllLeagueMatchesResponse.parseAsync(data);
		},
		url: "/league-matches",
		...options,
	});
};

/**
 * Returns a league match identified by the given UUID
 */
export const getLeagueMatchByUuid = <ThrowOnError extends boolean = false>(
	options: Options<GetLeagueMatchByUuidData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<GetLeagueMatchByUuidResponses, GetLeagueMatchByUuidErrors, ThrowOnError>(
		{
			responseValidator: async (data) => {
				return await zGetLeagueMatchByUuidResponse.parseAsync(data);
			},
			url: "/league-matches/{uuid}",
			...options,
		},
	);
};

/**
 * Returns all available match days as a paged list.
 * The default page size is 20. The page size must not be greater than 100
 */
export const getAllMatchDays = <ThrowOnError extends boolean = false>(
	options?: Options<GetAllMatchDaysData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<GetAllMatchDaysResponses, GetAllMatchDaysErrors, ThrowOnError>({
		responseValidator: async (data) => {
			return await zGetAllMatchDaysResponse.parseAsync(data);
		},
		url: "/match-days",
		...options,
	});
};

/**
 * Returns a match day identified by the given UUID
 */
export const getMatchDayByUuid = <ThrowOnError extends boolean = false>(
	options: Options<GetMatchDayByUuidData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<GetMatchDayByUuidResponses, GetMatchDayByUuidErrors, ThrowOnError>({
		responseValidator: async (data) => {
			return await zGetMatchDayByUuidResponse.parseAsync(data);
		},
		url: "/match-days/{uuid}",
		...options,
	});
};

/**
 * Returns all matches of a match day based on the given UUID. The default page size is 20. The page size must not be greater than 100
 */
export const getMatchesByMatchDay = <ThrowOnError extends boolean = false>(
	options: Options<GetMatchesByMatchDayData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<GetMatchesByMatchDayResponses, GetMatchesByMatchDayErrors, ThrowOnError>(
		{
			responseValidator: async (data) => {
				return await zGetMatchesByMatchDayResponse.parseAsync(data);
			},
			url: "/match-days/{uuid}/league-matches",
			...options,
		},
	);
};

/**
 * Returns all available super competitions as a paged list.
 * The default page size is 20. The page size must not be greater than 100. The sub-competitions belonging to each super competition are added as an _embedded entity list.
 */
export const getAllSuperCompetitions = <ThrowOnError extends boolean = false>(
	options?: Options<GetAllSuperCompetitionsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetAllSuperCompetitionsResponses,
		GetAllSuperCompetitionsErrors,
		ThrowOnError
	>({
		responseValidator: async (data) => {
			return await zGetAllSuperCompetitionsResponse.parseAsync(data);
		},
		url: "/super-competitions",
		...options,
	});
};

/**
 * Returns a super competition identified by the given UUID
 */
export const getSuperCompetitionByUuid = <ThrowOnError extends boolean = false>(
	options: Options<GetSuperCompetitionByUuidData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetSuperCompetitionByUuidResponses,
		GetSuperCompetitionByUuidErrors,
		ThrowOnError
	>({
		responseValidator: async (data) => {
			return await zGetSuperCompetitionByUuidResponse.parseAsync(data);
		},
		url: "/super-competitions/{uuid}",
		...options,
	});
};

/**
 * Returns all available events as a paged list. The default page size is 20. The page size must not be greater than 100
 */
export const getAllEvents = <ThrowOnError extends boolean = false>(
	options?: Options<GetAllEventsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<GetAllEventsResponses, GetAllEventsErrors, ThrowOnError>({
		responseValidator: async (data) => {
			return await zGetAllEventsResponse.parseAsync(data);
		},
		url: "/events",
		...options,
	});
};

/**
 * Returns an event identified by the given UUID
 */
export const getEventByUuid = <ThrowOnError extends boolean = false>(
	options: Options<GetEventByUuidData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<GetEventByUuidResponses, GetEventByUuidErrors, ThrowOnError>({
		responseValidator: async (data) => {
			return await zGetEventByUuidResponse.parseAsync(data);
		},
		url: "/events/{uuid}",
		...options,
	});
};

/**
 * Returns an event type identified by the given UUID
 */
export const getEventTypeByUuid = <ThrowOnError extends boolean = false>(
	options: Options<GetEventTypeByUuidData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<GetEventTypeByUuidResponses, GetEventTypeByUuidErrors, ThrowOnError>({
		responseValidator: async (data) => {
			return await zGetEventTypeByUuidResponse.parseAsync(data);
		},
		url: "/event-types/{uuid}",
		...options,
	});
};

/**
 * Returns all available event types.
 */
export const getEventTypes = <ThrowOnError extends boolean = false>(
	options?: Options<GetEventTypesData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<GetEventTypesResponses, GetEventTypesErrors, ThrowOnError>({
		responseValidator: async (data) => {
			return await zGetEventTypesResponse.parseAsync(data);
		},
		url: "/event-types",
		...options,
	});
};

/**
 * Returns all available seasons
 */
export const getAllSeasons = <ThrowOnError extends boolean = false>(
	options?: Options<GetAllSeasonsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<GetAllSeasonsResponses, GetAllSeasonsErrors, ThrowOnError>({
		responseValidator: async (data) => {
			return await zGetAllSeasonsResponse.parseAsync(data);
		},
		url: "/seasons",
		...options,
	});
};

export const getLeagueHierarchiesForSeason = <ThrowOnError extends boolean = false>(
	options: Options<GetLeagueHierarchiesForSeasonData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<unknown, GetLeagueHierarchiesForSeasonErrors, ThrowOnError>({
		url: "/seasons/{uuid}/league-hierarchies",
		...options,
	});
};

/**
 * Returns a season identified by the given UUID
 */
export const getSeasonByUuid = <ThrowOnError extends boolean = false>(
	options: Options<GetSeasonByUuidData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<GetSeasonByUuidResponses, GetSeasonByUuidErrors, ThrowOnError>({
		responseValidator: async (data) => {
			return await zGetSeasonByUuidResponse.parseAsync(data);
		},
		url: "/seasons/{uuid}",
		...options,
	});
};

/**
 * Returns all available sports clubs.
 * The default page size is 20. The page size must not be greater than 100
 */
export const getAllSportsclubs = <ThrowOnError extends boolean = false>(
	options?: Options<GetAllSportsclubsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<GetAllSportsclubsResponses, GetAllSportsclubsErrors, ThrowOnError>({
		responseValidator: async (data) => {
			return await zGetAllSportsclubsResponse.parseAsync(data);
		},
		url: "/sportsclubs",
		...options,
	});
};

/**
 * Returns a sports club identified by the given UUID.
 */
export const getSportsclub = <ThrowOnError extends boolean = false>(
	options: Options<GetSportsclubData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<GetSportsclubResponses, GetSportsclubErrors, ThrowOnError>({
		responseValidator: async (data) => {
			return await zGetSportsclubResponse.parseAsync(data);
		},
		url: "/sportsclubs/{uuid}",
		...options,
	});
};

/**
 * Returns all available teams as a paged list.
 * The default page size is 20. The page size must not be greater than 100
 */
export const getAllTeams = <ThrowOnError extends boolean = false>(options?: Options<GetAllTeamsData, ThrowOnError>) => {
	return (options?.client ?? _heyApiClient).get<GetAllTeamsResponses, GetAllTeamsErrors, ThrowOnError>({
		responseValidator: async (data) => {
			return await zGetAllTeamsResponse.parseAsync(data);
		},
		url: "/teams",
		...options,
	});
};

/**
 * Returns a team identified by the given UUID
 */
export const getTeamByUuid = <ThrowOnError extends boolean = false>(
	options: Options<GetTeamByUuidData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<GetTeamByUuidResponses, GetTeamByUuidErrors, ThrowOnError>({
		responseValidator: async (data) => {
			return await zGetTeamByUuidResponse.parseAsync(data);
		},
		url: "/teams/{uuid}",
		...options,
	});
};

/**
 * Retrieves the user data for the current user identified by the mandatory JSON web token authorization header
 */
export const getCurrentUser = <ThrowOnError extends boolean = false>(
	options?: Options<GetCurrentUserData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<GetCurrentUserResponses, GetCurrentUserErrors, ThrowOnError>({
		responseValidator: async (data) => {
			return await zGetCurrentUserResponse.parseAsync(data);
		},
		url: "/user-details/current",
		...options,
	});
};

/**
 * Provides links to sub resources
 */
export const userDetailsRootLinks = <ThrowOnError extends boolean = false>(
	options?: Options<UserDetailsRootLinksData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		UserDetailsRootLinksResponses,
		UserDetailsRootLinksErrors,
		ThrowOnError
	>({
		responseValidator: async (data) => {
			return await zUserDetailsRootLinksResponse.parseAsync(data);
		},
		url: "/user-details",
		...options,
	});
};
