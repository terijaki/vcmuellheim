// This file is auto-generated by @hey-api/openapi-ts

import { z } from "zod";

export const zConstraintViolation = z.object({
	constraint: z.string().optional(),
	property: z.string().optional(),
	entity: z.string().optional(),
	invalidValue: z.string().optional(),
	message: z.string().optional(),
});

export const zValidationError = z.object({
	violations: z.array(zConstraintViolation).optional(),
});

export const zResponseExceptionMessage = z.object({
	message: z.string().optional(),
});

export const zResponseException = z.object({
	exception: z.string().optional(),
	message: z.string().optional(),
});

export const zLinks = z.object({
	empty: z.boolean().optional(),
});

export const zEmbedded = z.object({
	empty: z.boolean().optional(),
});

export const zAssociation = z.object({
	uuid: z.string(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	name: z.string(),
	shortname: z.union([z.string(), z.null()]).optional(),
	parentUuid: z.union([z.string(), z.null()]).optional(),
	level: z.union([z.number().int(), z.null()]).optional(),
});

export const zHalRepresentation = z.object({
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
});

export const zAssociationResourcePage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zAssociation).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

/**
 * Address for a location or a person. An address object may be null if no address data is available. For persons this might be the case if the address visibility has been set to private.
 */
export const zAddress = z.object({
	street: z.union([z.string(), z.null()]).optional(),
	postcode: z.union([z.string(), z.null()]).optional(),
	city: z.union([z.string(), z.null()]).optional(),
	country: z.union([z.string(), z.null()]).optional(),
	extrafield: z.union([z.string(), z.null()]).optional(),
	region: z.union([z.string(), z.null()]).optional(),
	postbox: z.union([z.string(), z.null()]).optional(),
});

/**
 * A member of a committee. Personal data may be null if its visibility has been restricted.
 */
export const zCommitteeMember = z.object({
	uuid: z.string().optional(),
	committeeUuid: z.string().optional(),
	additionalTitle: z.string().optional(),
	sourceFunction: z.string().optional(),
	description: z.string().optional(),
	firstName: z.string().optional(),
	lastName: z.string().optional(),
	email: z.string().optional(),
	priority: z.number().int().optional(),
	address: zAddress.optional(),
	phoneMobile: z.string().optional(),
	fax: z.string().optional(),
	phoneWork: z.string().optional(),
	faxWork: z.string().optional(),
	phoneMobileWork: z.string().optional(),
	portraitPhotoLink: z.string().optional(),
});

export const zCommittee = z.object({
	uuid: z.string().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	associationUuid: z.string().optional(),
	members: z.array(zCommitteeMember).optional(),
	name: z.string().optional(),
	shortname: z.string().optional(),
	description: z.string().optional(),
	type: z.string().optional(),
	imageLink: z.string().optional(),
});

export const zCommitteePage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zCommittee).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

export const zSportsclubDto = z.object({
	uuid: z.string(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	name: z.string(),
	shortname: z.union([z.string(), z.null()]).optional(),
	sportsclubNumber: z.union([z.coerce.bigint(), z.null()]).optional(),
	associationUuid: z.union([z.string(), z.null()]).optional(),
	logoImageLink: z.union([z.string(), z.null()]).optional(),
});

export const zSportsclubPage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zSportsclubDto).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

export const zLeagueHierarchyDto = z.object({
	uuid: z.string().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	name: z.string().optional(),
	shortName: z.string().optional(),
	seasonUuid: z.string().optional(),
	associationUuid: z.string().optional(),
	level: z.number().int().optional(),
	parentLeagueHierarchyUuid: z.string().optional(),
});

export const zLeagueHierarchyPage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zLeagueHierarchyDto).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

/**
 * A location comprises the location's name, its address, and its geographical coordinates if available
 */
export const zLocation = z.object({
	uuid: z.string().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	name: z.string().optional(),
	longitude: z.number().optional(),
	latitude: z.number().optional(),
	address: zAddress.optional(),
});

export const zLocationResourcePage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zLocation).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

export const zCompetitionDto = z.object({
	uuid: z.string().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	name: z.string().optional(),
	shortName: z.string().optional(),
	gender: z.enum(["MALE", "FEMALE", "MIXED"]).optional(),
	leagueHierarchyUuid: z.string().optional(),
	seasonUuid: z.string().optional(),
	associationUuid: z.string().optional(),
	superCompetitionUuid: z.string().optional(),
});

export const zCompetitionPage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zCompetitionDto).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

export const zMatchResultTypeCount = z.object({
	result: z.string().optional(),
	count: z.number().int().optional(),
});

export const zLeagueRankingsEntryDto = z.object({
	uuid: z.string().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	teamName: z.union([z.string(), z.null()]).optional(),
	rank: z.number().int().optional(),
	matchesPlayed: z.union([z.number().int(), z.null()]).optional(),
	points: z.union([z.number().int(), z.null()]).optional(),
	scoreIncludingLosses: z.union([z.string(), z.null()]).optional(),
	wins: z.union([z.number().int(), z.null()]).optional(),
	losses: z.union([z.number().int(), z.null()]).optional(),
	setWins: z.union([z.number().int(), z.null()]).optional(),
	setLosses: z.union([z.number().int(), z.null()]).optional(),
	setDifference: z.union([z.number().int(), z.null()]).optional(),
	setRatio: z.union([z.number(), z.null()]).optional(),
	ballWins: z.union([z.number().int(), z.null()]).optional(),
	ballLosses: z.union([z.number().int(), z.null()]).optional(),
	ballDifference: z.union([z.number().int(), z.null()]).optional(),
	ballRatio: z.union([z.number(), z.null()]).optional(),
	resultTypes: z.union([z.array(zMatchResultTypeCount), z.null()]).optional(),
});

export const zCompetitionMatchGroupRankingsDto = z.object({
	uuid: z.string().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	matchGroupName: z.string().optional(),
	rankings: z.array(zLeagueRankingsEntryDto).optional(),
});

export const zCompetitionRankingsResourcePage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zCompetitionMatchGroupRankingsDto).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

export const zTeamDto = z.object({
	uuid: z.string().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	masterTeamUuid: z.union([z.string(), z.null()]).optional(),
	name: z.string().optional(),
	shortName: z.union([z.string(), z.null()]).optional(),
	teamNumber: z.union([z.number().int(), z.null()]).optional(),
	clubCode: z.union([z.string(), z.null()]).optional(),
	logoImageLink: z.union([z.string(), z.null()]).optional(),
	sportsclubUuid: z.union([z.string(), z.null()]).optional(),
	associationUuid: z.union([z.string(), z.null()]).optional(),
});

export const zTeamPage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zTeamDto).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

export const zRefereeTeamDto = z.object({
	firstReferee: z.string().optional(),
	secondReferee: z.string().optional(),
	challengeReferee: z.string().optional(),
});

export const zVolleyballMatchSetRestDto = z.object({
	number: z.number().int().optional(),
	ballPoints: z.string().optional(),
	winner: z.string().optional(),
	winnerName: z.string().optional(),
	duration: z.number().int().optional(),
});

export const zVolleyballMatchResultsDto = z.object({
	winner: z.string().optional(),
	winnerName: z.string().optional(),
	setPoints: z.string().optional(),
	ballPoints: z.string().optional(),
	sets: z.array(zVolleyballMatchSetRestDto).optional(),
});

export const zCompetitionMatchDto = z.object({
	uuid: z.string().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	date: z.string().datetime().optional(),
	time: z.string().optional(),
	matchNumber: z.number().int().optional(),
	decidingMatch: z.boolean().optional(),
	gameReassessed: z.boolean().optional(),
	host: z.string().optional(),
	referees: zRefereeTeamDto.optional(),
	spectators: z.number().int().optional(),
	netDuration: z.number().int().optional(),
	verified: z.boolean().optional(),
	location: zLocation.optional(),
	seasonUuid: z.string().optional(),
	associationUuid: z.string().optional(),
	results: zVolleyballMatchResultsDto.optional(),
	matchGroupUuid: z.string().optional(),
	competitionUuid: z.string().optional(),
	indefinitelyRescheduled: z.boolean().optional(),
	delayPossible: z.boolean().optional(),
});

export const zCompetitionMatchPage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zCompetitionMatchDto).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

export const zCompetitionMatchGroupDto = z.object({
	uuid: z.string().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	name: z.string().optional(),
	tourneyLevel: z.number().int().optional(),
	seasonUuid: z.string().optional(),
	competitionUuid: z.string().optional(),
	associationUuid: z.string().optional(),
});

export const zCompetitionMatchGroupPage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zCompetitionMatchGroupDto).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

export const zLeagueDto = z.object({
	uuid: z.string().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	name: z.string().optional(),
	shortName: z.string().optional(),
	gender: z.enum(["MALE", "FEMALE", "MIXED"]).optional(),
	leagueHierarchyUuid: z.string().optional(),
	seasonUuid: z.string().optional(),
	associationUuid: z.string().optional(),
});

export const zLeaguePage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zLeagueDto).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

export const zLeagueRankingsResourcePage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zLeagueRankingsEntryDto).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

export const zLeagueMatchDto = z.object({
	uuid: z.string(),
	_links: zLinks.optional(),
	_embedded: z
		.object({
			team1: z
				.object({
					uuid: z.string(),
					name: z.string(),
					sportsclubUuid: z.string(),
				})
				.optional(),
			team2: z
				.object({
					uuid: z.string(),
					name: z.string(),
					sportsclubUuid: z.string(),
				})
				.optional(),
		})
		.optional(),
	date: z.string().date().optional(),
	time: z.string().optional(),
	matchNumber: z.number().int().optional(),
	decidingMatch: z.boolean().optional(),
	gameReassessed: z.boolean().optional(),
	host: z.string().optional(),
	referees: z.unknown().optional(),
	spectators: z.number().int().optional(),
	netDuration: z.number().int().optional(),
	verified: z.boolean().optional(),
	location: zLocation.optional(),
	seasonUuid: z.string().optional(),
	associationUuid: z.string().optional(),
	results: zVolleyballMatchResultsDto.optional(),
	matchDayUuid: z.string().optional(),
	leagueUuid: z.string().optional(),
	indefinitelyRescheduled: z.boolean().optional(),
	delayPossible: z.boolean().optional(),
});

export const zLeagueMatchPage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zLeagueMatchDto).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

export const zLeagueMatchDayDto = z.object({
	uuid: z.string().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	name: z.string().optional(),
	matchdate: z.string().datetime().optional(),
	seasonUuid: z.string().optional(),
	leagueUuid: z.string().optional(),
	associationUuid: z.string().optional(),
});

export const zLeagueMatchDayPage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zLeagueMatchDayDto).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

export const zSuperCompetitionDto = z.object({
	uuid: z.string().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	name: z.string().optional(),
	shortName: z.string().optional(),
	gender: z.enum(["MALE", "FEMALE", "MIXED"]).optional(),
	leagueHierarchyUuid: z.string().optional(),
	seasonUuid: z.string().optional(),
	associationUuid: z.string().optional(),
	superCompetitionUuid: z.string().optional(),
});

export const zSuperCompetitionPage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zSuperCompetitionDto).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

export const zEvent = z.object({
	uuid: z.string().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	name: z.string().optional(),
	shortname: z.string().optional(),
	eventNumber: z.number().int().optional(),
	overridingEventNumber: z.string().optional(),
	dateNotYetKnown: z.boolean().optional(),
	endsAt: z.string().datetime().optional(),
	beginsAt: z.string().datetime().optional(),
	registrationDeadline: z.string().datetime().optional(),
	associationUuid: z.string().optional(),
	canceled: z.boolean().optional(),
	minimumNumberOfParticipants: z.number().int().optional(),
	maximumNumberOfParticipants: z.number().int().optional(),
	usedCapacity: z.number().int().optional(),
	registrationUri: z.string().url().optional(),
	location: zLocation.optional(),
	eventTypeUuid: z.string().optional(),
});

export const zEventPage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zEvent).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

/**
 * Type of an event.
 */
export const zEventType = z.object({
	uuid: z.string().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	name: z.string().optional(),
	description: z.string().optional(),
	category: z.string().optional(),
	associationUuid: z.string().optional(),
});

export const zSeasonDto = z.array(
	z.object({
		uuid: z.string(),
		_links: zLinks.optional(),
		_embedded: zEmbedded.optional(),
		name: z.string(),
		startDate: z.string(),
		endDate: z.string(),
		currentSeason: z.boolean(),
	}),
);

export const zUserDetailsDto = z.object({
	uuid: z.string().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	firstName: z.string().optional(),
	lastName: z.string().optional(),
	dateOfBirth: z.string().datetime().optional(),
	gender: z.enum(["UNDEFINED", "MALE", "FEMALE", "DIVERS"]).optional(),
	emailAddress: z.string().optional(),
	samsInstance: z.string().optional(),
	refsoftID: z.string().optional(),
});

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetApiBaseLinksParameterXApiKey = z.string();

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetAssociationByUuidParameterXApiKey = z.string();

/**
 * UUID of the requested association
 */
export const zGetAssociationByUuidParameterUuid = z.string();

/**
 * Successful operation
 */
export const zGetAssociationByUuidResponse = zAssociation;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetAssociationsParameterXApiKey = z.string();

/**
 * Requested page number. Defaults to the first page (i.e. page number 0).
 */
export const zGetAssociationsParameterPage = z.number().int();

/**
 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
 */
export const zGetAssociationsParameterSize = z.number().int();

/**
 * Filter for association using the given UUID. Defaults to no filtering.
 */
export const zGetAssociationsParameterAssociation = z.string();

/**
 * Successful operation
 */
export const zGetAssociationsResponse = zAssociationResourcePage;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetCommitteesForAssociationParameterXApiKey = z.string();

/**
 * UUID of the association whose committees are requested
 */
export const zGetCommitteesForAssociationParameterUuid = z.string();

/**
 * Requested page number. Defaults to the first page (i.e. page number 0).
 */
export const zGetCommitteesForAssociationParameterPage = z.number().int();

/**
 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
 */
export const zGetCommitteesForAssociationParameterSize = z.number().int();

/**
 * Successful operation
 */
export const zGetCommitteesForAssociationResponse = zCommitteePage;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetSportsclubsForAssociationParameterXApiKey = z.string();

/**
 * UUID of the association whose committees are requested
 */
export const zGetSportsclubsForAssociationParameterUuid = z.string();

/**
 * Requested page number. Defaults to the first page (i.e. page number 0).
 */
export const zGetSportsclubsForAssociationParameterPage = z.number().int();

/**
 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
 */
export const zGetSportsclubsForAssociationParameterSize = z.number().int();

/**
 * Successful operation
 */
export const zGetSportsclubsForAssociationResponse = zSportsclubPage;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetAllCommitteesParameterXApiKey = z.string();

/**
 * Requested page number. Defaults to the first page (i.e. page number 0).
 */
export const zGetAllCommitteesParameterPage = z.number().int();

/**
 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
 */
export const zGetAllCommitteesParameterSize = z.number().int();

/**
 * Successful operation
 */
export const zGetAllCommitteesResponse = zCommitteePage;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetCommitteeParameterXApiKey = z.string();

export const zGetCommitteeParameterUuid = z.string();

/**
 * Successful operation
 */
export const zGetCommitteeResponse = zCommittee;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetAllLeagueHierarchiesParameterXApiKey = z.string();

/**
 * Requested page number. Defaults to the first page (i.e. page number 0).
 */
export const zGetAllLeagueHierarchiesParameterPage = z.number().int();

/**
 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
 */
export const zGetAllLeagueHierarchiesParameterSize = z.number().int();

/**
 * Filter for the season. UUID of the season to which the league hierarchy belongs.
 */
export const zGetAllLeagueHierarchiesParameterForSeason = z.string();

/**
 * Filter for association using the given UUID. Defaults to no filtering.
 */
export const zGetAllLeagueHierarchiesParameterAssociation = z.string();

/**
 * Successful operation
 */
export const zGetAllLeagueHierarchiesResponse = zLeagueHierarchyPage;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetCompetitionsByLeagueHierarchyParameterXApiKey = z.string();

export const zGetCompetitionsByLeagueHierarchyParameterUuid = z.string();

/**
 * Requested page number. Defaults to the first page (i.e. page number 0).
 */
export const zGetCompetitionsByLeagueHierarchyParameterPage = z.number().int();

/**
 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
 */
export const zGetCompetitionsByLeagueHierarchyParameterSize = z.number().int();

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetLeagueHierarchyByUuidParameterXApiKey = z.string();

export const zGetLeagueHierarchyByUuidParameterUuid = z.string();

/**
 * Successful operation
 */
export const zGetLeagueHierarchyByUuidResponse = zLeagueHierarchyDto;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetLeaguesByLeagueHierarchyParameterXApiKey = z.string();

export const zGetLeaguesByLeagueHierarchyParameterUuid = z.string();

/**
 * Requested page number. Defaults to the first page (i.e. page number 0).
 */
export const zGetLeaguesByLeagueHierarchyParameterPage = z.number().int();

/**
 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
 */
export const zGetLeaguesByLeagueHierarchyParameterSize = z.number().int();

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetSuperCompetitionsByLeagueHierarchyParameterXApiKey = z.string();

export const zGetSuperCompetitionsByLeagueHierarchyParameterUuid = z.string();

/**
 * Requested page number. Defaults to the first page (i.e. page number 0).
 */
export const zGetSuperCompetitionsByLeagueHierarchyParameterPage = z.number().int();

/**
 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
 */
export const zGetSuperCompetitionsByLeagueHierarchyParameterSize = z.number().int();

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetAllLocationsParameterXApiKey = z.string();

/**
 * Requested page number. Defaults to the first page (i.e. page number 0).
 */
export const zGetAllLocationsParameterPage = z.number().int();

/**
 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
 */
export const zGetAllLocationsParameterSize = z.number().int();

/**
 * Success
 */
export const zGetAllLocationsResponse = zLocationResourcePage;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetLocationByUuidParameterXApiKey = z.string();

export const zGetLocationByUuidParameterUuid = z.string();

/**
 * Success
 */
export const zGetLocationByUuidResponse = zLocation;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetAllCompetitionsParameterXApiKey = z.string();

/**
 * Requested page number. Defaults to the first page (i.e. page number 0).
 */
export const zGetAllCompetitionsParameterPage = z.number().int();

/**
 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
 */
export const zGetAllCompetitionsParameterSize = z.number().int();

/**
 * Filter for association using the given UUID. Defaults to no filtering.
 */
export const zGetAllCompetitionsParameterAssociation = z.string();

/**
 * Successful operation
 */
export const zGetAllCompetitionsResponse = zCompetitionPage;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetCompetitionByUuidParameterXApiKey = z.string();

export const zGetCompetitionByUuidParameterUuid = z.string();

/**
 * Successful operation
 */
export const zGetCompetitionByUuidResponse = zCompetitionDto;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetMatchGroupsForCompetitionParameterXApiKey = z.string();

export const zGetMatchGroupsForCompetitionParameterUuid = z.string();

/**
 * Requested page number. Defaults to the first page (i.e. page number 0).
 */
export const zGetMatchGroupsForCompetitionParameterPage = z.number().int();

/**
 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
 */
export const zGetMatchGroupsForCompetitionParameterSize = z.number().int();

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetRankingsForCompetitionParameterXApiKey = z.string();

export const zGetRankingsForCompetitionParameterUuid = z.string();

/**
 * Requested page number. Defaults to the first page (i.e. page number 0).
 */
export const zGetRankingsForCompetitionParameterPage = z.number().int();

/**
 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
 */
export const zGetRankingsForCompetitionParameterSize = z.number().int();

/**
 * Successful operation
 */
export const zGetRankingsForCompetitionResponse = zCompetitionRankingsResourcePage;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetTeamsForCompetitionParameterXApiKey = z.string();

export const zGetTeamsForCompetitionParameterUuid = z.string();

/**
 * Requested page number. Defaults to the first page (i.e. page number 0).
 */
export const zGetTeamsForCompetitionParameterPage = z.number().int();

/**
 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
 */
export const zGetTeamsForCompetitionParameterSize = z.number().int();

/**
 * Successful operation
 */
export const zGetTeamsForCompetitionResponse = zTeamPage;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetAllCompetitionMatchesWithFilterParameterXApiKey = z.string();

/**
 * Requested page number. Defaults to the first page (i.e. page number 0).
 */
export const zGetAllCompetitionMatchesWithFilterParameterPage = z.number().int();

/**
 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
 */
export const zGetAllCompetitionMatchesWithFilterParameterSize = z.number().int();

/**
 * Filter for association using the given UUID. Defaults to no filtering.
 */
export const zGetAllCompetitionMatchesWithFilterParameterAssociation = z.string();

/**
 * Filter by season UUID: Find all matches from a particular season.
 */
export const zGetAllCompetitionMatchesWithFilterParameterForSeason = z.string();

/**
 * Filter by competition UUID: Find all matches from a particular competition.
 */
export const zGetAllCompetitionMatchesWithFilterParameterForCompetition = z.string();

/**
 * Filter by sports club UUID: Find all matches for a particular sports club.
 */
export const zGetAllCompetitionMatchesWithFilterParameterForSportsclub = z.string();

/**
 * Filter by team UUID: Find all matches attended by a particular team.
 */
export const zGetAllCompetitionMatchesWithFilterParameterForTeam = z.string();

/**
 * Successful operation
 */
export const zGetAllCompetitionMatchesWithFilterResponse = zCompetitionMatchPage;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetCompetitionMatchByUuidParameterXApiKey = z.string();

export const zGetCompetitionMatchByUuidParameterUuid = z.string();

/**
 * Successful operation
 */
export const zGetCompetitionMatchByUuidResponse = zCompetitionMatchDto;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetAllMatchGroupsParameterXApiKey = z.string();

/**
 * Requested page number. Defaults to the first page (i.e. page number 0).
 */
export const zGetAllMatchGroupsParameterPage = z.number().int();

/**
 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
 */
export const zGetAllMatchGroupsParameterSize = z.number().int();

/**
 * Filter for association using the given UUID. Defaults to no filtering.
 */
export const zGetAllMatchGroupsParameterAssociation = z.string();

/**
 * Successful operation
 */
export const zGetAllMatchGroupsResponse = zCompetitionMatchGroupPage;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetMatchGroupByUuidParameterXApiKey = z.string();

export const zGetMatchGroupByUuidParameterUuid = z.string();

/**
 * Successful operation
 */
export const zGetMatchGroupByUuidResponse = zCompetitionMatchGroupDto;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetMatchesByMatchGroupParameterXApiKey = z.string();

export const zGetMatchesByMatchGroupParameterUuid = z.string();

/**
 * Requested page number. Defaults to the first page (i.e. page number 0).
 */
export const zGetMatchesByMatchGroupParameterPage = z.number().int();

/**
 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
 */
export const zGetMatchesByMatchGroupParameterSize = z.number().int();

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetAllLeaguesParameterXApiKey = z.string();

/**
 * Requested page number. Defaults to the first page (i.e. page number 0).
 */
export const zGetAllLeaguesParameterPage = z.number().int();

/**
 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
 */
export const zGetAllLeaguesParameterSize = z.number().int();

/**
 * Filter for association using the given UUID. Defaults to no filtering.
 */
export const zGetAllLeaguesParameterAssociation = z.string();

/**
 * Successful operation
 */
export const zGetAllLeaguesResponse = zLeaguePage;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetLeagueByUuidParameterXApiKey = z.string();

export const zGetLeagueByUuidParameterUuid = z.string();

/**
 * Successful operation
 */
export const zGetLeagueByUuidResponse = zLeagueDto;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetMatchDaysForLeagueParameterXApiKey = z.string();

export const zGetMatchDaysForLeagueParameterUuid = z.string();

/**
 * Requested page number. Defaults to the first page (i.e. page number 0).
 */
export const zGetMatchDaysForLeagueParameterPage = z.number().int();

/**
 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
 */
export const zGetMatchDaysForLeagueParameterSize = z.number().int();

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetRankingsForLeagueParameterXApiKey = z.string();

export const zGetRankingsForLeagueParameterUuid = z.string();

/**
 * Requested page number. Defaults to the first page (i.e. page number 0).
 */
export const zGetRankingsForLeagueParameterPage = z.number().int();

/**
 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
 */
export const zGetRankingsForLeagueParameterSize = z.number().int();

/**
 * Successful operation
 */
export const zGetRankingsForLeagueResponse = zLeagueRankingsResourcePage;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetTeamsForLeagueParameterXApiKey = z.string();

export const zGetTeamsForLeagueParameterUuid = z.string();

/**
 * Requested page number. Defaults to the first page (i.e. page number 0).
 */
export const zGetTeamsForLeagueParameterPage = z.number().int();

/**
 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
 */
export const zGetTeamsForLeagueParameterSize = z.number().int();

/**
 * Successful operation
 */
export const zGetTeamsForLeagueResponse = zTeamPage;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetAllLeagueMatchesParameterXApiKey = z.string();

/**
 * Requested page number. Defaults to the first page (i.e. page number 0).
 */
export const zGetAllLeagueMatchesParameterPage = z.number().int();

/**
 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
 */
export const zGetAllLeagueMatchesParameterSize = z.number().int();

/**
 * Filter for association using the given UUID. Defaults to no filtering.
 */
export const zGetAllLeagueMatchesParameterAssociation = z.string();

/**
 * Filter by season UUID: Find all matches from a particular season.
 */
export const zGetAllLeagueMatchesParameterForSeason = z.string();

/**
 * Filter by league UUID: Find all matches from a particular league.
 */
export const zGetAllLeagueMatchesParameterForLeague = z.string();

/**
 * Filter by sports club UUID: Find all matches for a particular sports club.
 */
export const zGetAllLeagueMatchesParameterForSportsclub = z.string();

/**
 * Filter by team UUID: Find all matches attended by a particular team.
 */
export const zGetAllLeagueMatchesParameterForTeam = z.string();

/**
 * Successful operation
 */
export const zGetAllLeagueMatchesResponse = zLeagueMatchPage;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetLeagueMatchByUuidParameterXApiKey = z.string();

export const zGetLeagueMatchByUuidParameterUuid = z.string();

/**
 * Successful operation
 */
export const zGetLeagueMatchByUuidResponse = zLeagueMatchDto;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetAllMatchDaysParameterXApiKey = z.string();

/**
 * Requested page number. Defaults to the first page (i.e. page number 0).
 */
export const zGetAllMatchDaysParameterPage = z.number().int();

/**
 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
 */
export const zGetAllMatchDaysParameterSize = z.number().int();

/**
 * Filter for association using the given UUID. Defaults to no filtering.
 */
export const zGetAllMatchDaysParameterAssociation = z.string();

/**
 * Successful operation
 */
export const zGetAllMatchDaysResponse = zLeagueMatchDayPage;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetMatchDayByUuidParameterXApiKey = z.string();

export const zGetMatchDayByUuidParameterUuid = z.string();

/**
 * Successful operation
 */
export const zGetMatchDayByUuidResponse = zLeagueMatchDayDto;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetMatchesByMatchDayParameterXApiKey = z.string();

export const zGetMatchesByMatchDayParameterUuid = z.string();

/**
 * Requested page number. Defaults to the first page (i.e. page number 0).
 */
export const zGetMatchesByMatchDayParameterPage = z.number().int();

/**
 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
 */
export const zGetMatchesByMatchDayParameterSize = z.number().int();

/**
 * Successful operation
 */
export const zGetMatchesByMatchDayResponse = zLeagueMatchPage;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetAllSuperCompetitionsParameterXApiKey = z.string();

/**
 * Requested page number. Defaults to the first page (i.e. page number 0).
 */
export const zGetAllSuperCompetitionsParameterPage = z.number().int();

/**
 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
 */
export const zGetAllSuperCompetitionsParameterSize = z.number().int();

/**
 * Filter for association using the given UUID. Defaults to no filtering.
 */
export const zGetAllSuperCompetitionsParameterAssociation = z.string();

/**
 * Successful operation
 */
export const zGetAllSuperCompetitionsResponse = zSuperCompetitionPage;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetSuperCompetitionByUuidParameterXApiKey = z.string();

export const zGetSuperCompetitionByUuidParameterUuid = z.string();

/**
 * Successful operation
 */
export const zGetSuperCompetitionByUuidResponse = zSuperCompetitionDto;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetAllEventsParameterXApiKey = z.string();

/**
 * Requested page number. Defaults to the first page (i.e. page number 0).
 */
export const zGetAllEventsParameterPage = z.number().int();

/**
 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
 */
export const zGetAllEventsParameterSize = z.number().int();

/**
 * Filter for association using the given UUID. Defaults to no filtering.
 */
export const zGetAllEventsParameterAssociation = z.string();

/**
 * Successful operation
 */
export const zGetAllEventsResponse = zEventPage;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetEventByUuidParameterXApiKey = z.string();

/**
 * UUID of the requested event
 */
export const zGetEventByUuidParameterUuid = z.string();

/**
 * Successful operation
 */
export const zGetEventByUuidResponse = zEvent;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetEventTypeByUuidParameterXApiKey = z.string();

/**
 * UUID of the requested event type
 */
export const zGetEventTypeByUuidParameterUuid = z.string();

/**
 * Successful operation
 */
export const zGetEventTypeByUuidResponse = zEventType;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetEventTypesParameterXApiKey = z.string();

/**
 * Filter for association using the given UUID. Defaults to no filtering.
 */
export const zGetEventTypesParameterAssociation = z.string();

/**
 * Successful operation
 */
export const zGetEventTypesResponse = zEventType;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetAllSeasonsParameterXApiKey = z.string();

/**
 * Successful operation
 */
export const zGetAllSeasonsResponse = zSeasonDto;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetLeagueHierarchiesForSeasonParameterXApiKey = z.string();

export const zGetLeagueHierarchiesForSeasonParameterUuid = z.string();

/**
 * Requested page number. Defaults to the first page (i.e. page number 0).
 */
export const zGetLeagueHierarchiesForSeasonParameterPage = z.number().int();

/**
 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
 */
export const zGetLeagueHierarchiesForSeasonParameterSize = z.number().int();

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetSeasonByUuidParameterXApiKey = z.string();

export const zGetSeasonByUuidParameterUuid = z.string();

/**
 * Successful operation
 */
export const zGetSeasonByUuidResponse = zSeasonDto;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetAllSportsclubsParameterXApiKey = z.string();

/**
 * Requested page number. Defaults to the first page (i.e. page number 0).
 */
export const zGetAllSportsclubsParameterPage = z.number().int();

/**
 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
 */
export const zGetAllSportsclubsParameterSize = z.number().int();

/**
 * Filter for association using the given UUID. Defaults to no filtering.
 */
export const zGetAllSportsclubsParameterAssociation = z.string();

/**
 * Successful operation
 */
export const zGetAllSportsclubsResponse = zSportsclubPage;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetSportsclubParameterXApiKey = z.string();

export const zGetSportsclubParameterUuid = z.string();

/**
 * Successful operation
 */
export const zGetSportsclubResponse = zSportsclubDto;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetAllTeamsParameterXApiKey = z.string();

/**
 * Requested page number. Defaults to the first page (i.e. page number 0).
 */
export const zGetAllTeamsParameterPage = z.number().int();

/**
 * Requested number of items per page. Defaults to 20. The maximum allowed value is 100
 */
export const zGetAllTeamsParameterSize = z.number().int();

/**
 * Filter for association using the given UUID. Defaults to no filtering.
 */
export const zGetAllTeamsParameterAssociation = z.string();

/**
 * Successful operation
 */
export const zGetAllTeamsResponse = zTeamPage;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetTeamByUuidParameterXApiKey = z.string();

export const zGetTeamByUuidParameterUuid = z.string();

/**
 * Successful operation
 */
export const zGetTeamByUuidResponse = zTeamDto;

/**
 * A SAMS API key with permission to access this API.
 */
export const zGetCurrentUserParameterXApiKey = z.string();

/**
 * Successful operation
 */
export const zGetCurrentUserResponse = zUserDetailsDto;

/**
 * A SAMS API key with permission to access this API.
 */
export const zUserDetailsRootLinksParameterXApiKey = z.string();

/**
 * Successful operation
 */
export const zUserDetailsRootLinksResponse = zHalRepresentation;
