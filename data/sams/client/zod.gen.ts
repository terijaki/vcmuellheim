// This file is auto-generated by @hey-api/openapi-ts

import { z } from "zod";

export const zConstraintViolation = z.object({
	constraint: z.string().optional(),
	property: z.string().optional(),
	entity: z.string().optional(),
	invalidValue: z.string().optional(),
	message: z.string().optional(),
});

export const zValidationError = z.object({
	violations: z.array(zConstraintViolation).optional(),
});

export const zResponseExceptionMessage = z.object({
	message: z.string().optional(),
});

export const zResponseException = z.object({
	exception: z.string().optional(),
	message: z.string().optional(),
});

export const zLinks = z.object({
	empty: z.boolean().optional(),
});

export const zEmbedded = z.object({
	empty: z.boolean().optional(),
});

export const zAssociation = z.object({
	uuid: z.string(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	name: z.string(),
	shortname: z.union([z.string(), z.null()]).optional(),
	parentUuid: z.union([z.string(), z.null()]).optional(),
	level: z.union([z.number().int(), z.null()]).optional(),
});

export const zHalRepresentation = z.object({
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
});

export const zAssociationResourcePage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zAssociation).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

/**
 * Address for a location or a person. An address object may be null if no address data is available. For persons this might be the case if the address visibility has been set to private.
 */
export const zAddress = z.object({
	street: z.union([z.string(), z.null()]).optional(),
	postcode: z.union([z.string(), z.null()]).optional(),
	city: z.union([z.string(), z.null()]).optional(),
	country: z.union([z.string(), z.null()]).optional(),
	extrafield: z.union([z.string(), z.null()]).optional(),
	region: z.union([z.string(), z.null()]).optional(),
	postbox: z.union([z.string(), z.null()]).optional(),
});

/**
 * A member of a committee. Personal data may be null if its visibility has been restricted.
 */
export const zCommitteeMember = z.object({
	uuid: z.string().optional(),
	committeeUuid: z.string().optional(),
	additionalTitle: z.string().optional(),
	sourceFunction: z.string().optional(),
	description: z.string().optional(),
	firstName: z.string().optional(),
	lastName: z.string().optional(),
	email: z.string().optional(),
	priority: z.number().int().optional(),
	address: zAddress.optional(),
	phoneMobile: z.string().optional(),
	fax: z.string().optional(),
	phoneWork: z.string().optional(),
	faxWork: z.string().optional(),
	phoneMobileWork: z.string().optional(),
	portraitPhotoLink: z.string().optional(),
});

export const zCommittee = z.object({
	uuid: z.string().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	associationUuid: z.string().optional(),
	members: z.array(zCommitteeMember).optional(),
	name: z.string().optional(),
	shortname: z.string().optional(),
	description: z.string().optional(),
	type: z.string().optional(),
	imageLink: z.string().optional(),
});

export const zCommitteePage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zCommittee).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

export const zSportsclubDto = z.object({
	uuid: z.string(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	name: z.string(),
	shortname: z.union([z.string(), z.null()]).optional(),
	sportsclubNumber: z.union([z.coerce.bigint(), z.null()]).optional(),
	associationUuid: z.union([z.string(), z.null()]).optional(),
	logoImageLink: z.union([z.string(), z.null()]).optional(),
});

export const zSportsclubPage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zSportsclubDto).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

export const zLeagueHierarchyDto = z.object({
	uuid: z.string().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	name: z.string().optional(),
	shortName: z.string().optional(),
	seasonUuid: z.string().optional(),
	associationUuid: z.string().optional(),
	level: z.number().int().optional(),
	parentLeagueHierarchyUuid: z.string().optional(),
});

export const zLeagueHierarchyPage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zLeagueHierarchyDto).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

/**
 * A location comprises the location's name, its address, and its geographical coordinates if available
 */
export const zLocation = z.object({
	uuid: z.union([z.string(), z.null()]).optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	name: z.union([z.string(), z.null()]).optional(),
	longitude: z.union([z.number(), z.null()]).optional(),
	latitude: z.union([z.number(), z.null()]).optional(),
	address: zAddress.optional(),
});

export const zLocationResourcePage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zLocation).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

export const zCompetitionDto = z.object({
	uuid: z.string().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	name: z.string().optional(),
	shortName: z.string().optional(),
	gender: z.enum(["MALE", "FEMALE", "MIXED"]).optional(),
	leagueHierarchyUuid: z.string().optional(),
	seasonUuid: z.string().optional(),
	associationUuid: z.string().optional(),
	superCompetitionUuid: z.string().optional(),
});

export const zCompetitionPage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zCompetitionDto).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

export const zMatchResultTypeCount = z.object({
	result: z.string().optional(),
	count: z.number().int().optional(),
});

export const zLeagueRankingsEntryDto = z.object({
	uuid: z.string().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	teamName: z.union([z.string(), z.null()]).optional(),
	rank: z.number().int().optional(),
	matchesPlayed: z.union([z.number().int(), z.null()]).optional(),
	points: z.union([z.number().int(), z.null()]).optional(),
	scoreIncludingLosses: z.union([z.string(), z.null()]).optional(),
	wins: z.union([z.number().int(), z.null()]).optional(),
	losses: z.union([z.number().int(), z.null()]).optional(),
	setWins: z.union([z.number().int(), z.null()]).optional(),
	setLosses: z.union([z.number().int(), z.null()]).optional(),
	setDifference: z.union([z.number().int(), z.null()]).optional(),
	setRatio: z.union([z.number(), z.string(), z.null()]).optional(),
	ballWins: z.union([z.number().int(), z.null()]).optional(),
	ballLosses: z.union([z.number().int(), z.null()]).optional(),
	ballDifference: z.union([z.number().int(), z.null()]).optional(),
	ballRatio: z.union([z.number(), z.string(), z.null()]).optional(),
	resultTypes: z.union([z.array(zMatchResultTypeCount), z.null()]).optional(),
});

export const zCompetitionMatchGroupRankingsDto = z.object({
	uuid: z.string().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	matchGroupName: z.string().optional(),
	rankings: z.array(zLeagueRankingsEntryDto).optional(),
});

export const zCompetitionRankingsResourcePage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zCompetitionMatchGroupRankingsDto).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

export const zTeamDto = z.object({
	uuid: z.string().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	masterTeamUuid: z.union([z.string(), z.null()]).optional(),
	name: z.string().optional(),
	shortName: z.union([z.string(), z.null()]).optional(),
	teamNumber: z.union([z.number().int(), z.null()]).optional(),
	clubCode: z.union([z.string(), z.null()]).optional(),
	logoImageLink: z.union([z.string(), z.null()]).optional(),
	sportsclubUuid: z.union([z.string(), z.null()]).optional(),
	associationUuid: z.union([z.string(), z.null()]).optional(),
});

export const zTeamPage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zTeamDto).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

export const zRefereeTeamDto = z.object({
	firstReferee: z.union([z.string(), z.null()]).optional(),
	secondReferee: z.union([z.string(), z.null()]).optional(),
	challengeReferee: z.union([z.string(), z.null()]).optional(),
});

export const zVolleyballMatchSetRestDto = z.object({
	number: z.number().int().optional(),
	ballPoints: z.string().optional(),
	winner: z.string().optional(),
	winnerName: z.string().optional(),
	duration: z.number().int().optional(),
});

export const zVolleyballMatchResultsDto = z.object({
	winner: z.union([z.string(), z.null()]).optional(),
	winnerName: z.union([z.string(), z.null()]).optional(),
	setPoints: z.union([z.string(), z.null()]).optional(),
	ballPoints: z.union([z.string(), z.null()]).optional(),
	sets: z.union([z.array(zVolleyballMatchSetRestDto), z.null()]).optional(),
});

export const zCompetitionMatchDto = z.object({
	uuid: z.string(),
	_links: zLinks.optional(),
	_embedded: z
		.union([
			z.object({
				team1: z
					.object({
						uuid: z.string(),
						name: z.string(),
						sportsclubUuid: z.string(),
					})
					.optional(),
				team2: z
					.object({
						uuid: z.string(),
						name: z.string(),
						sportsclubUuid: z.string(),
					})
					.optional(),
			}),
			z.null(),
		])
		.optional(),
	date: z.union([z.string().date(), z.null()]).optional(),
	time: z.union([z.string(), z.null()]).optional(),
	matchNumber: z.union([z.number().int(), z.null()]).optional(),
	decidingMatch: z.union([z.boolean(), z.null()]).optional(),
	gameReassessed: z.union([z.boolean(), z.null()]).optional(),
	host: z.union([z.string(), z.null()]).optional(),
	referees: zRefereeTeamDto.optional().nullable(),
	spectators: z.union([z.number().int(), z.null()]).optional(),
	netDuration: z.union([z.number().int(), z.null()]).optional(),
	verified: z.union([z.boolean(), z.null()]).optional(),
	location: zLocation.optional().nullable(),
	seasonUuid: z.union([z.string(), z.null()]).optional(),
	associationUuid: z.union([z.string(), z.null()]).optional(),
	results: zVolleyballMatchResultsDto.optional().nullable(),
	matchGroupUuid: z.union([z.string(), z.null()]).optional(),
	competitionUuid: z.union([z.string(), z.null()]).optional(),
	delayPossible: z.union([z.boolean(), z.null()]).optional(),
	indefinitelyRescheduled: z.union([z.boolean(), z.null()]).optional(),
});

export const zCompetitionMatchPage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zCompetitionMatchDto).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

export const zCompetitionMatchGroupDto = z.object({
	uuid: z.string().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	name: z.string().optional(),
	tourneyLevel: z.number().int().optional(),
	seasonUuid: z.string().optional(),
	competitionUuid: z.string().optional(),
	associationUuid: z.string().optional(),
});

export const zCompetitionMatchGroupPage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zCompetitionMatchGroupDto).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

export const zLeagueDto = z.object({
	uuid: z.string().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	name: z.string().optional(),
	shortName: z.string().optional(),
	gender: z.enum(["MALE", "FEMALE", "MIXED"]).optional(),
	leagueHierarchyUuid: z.string().optional(),
	seasonUuid: z.string().optional(),
	associationUuid: z.string().optional(),
});

export const zLeaguePage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zLeagueDto).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

export const zLeagueRankingsResourcePage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zLeagueRankingsEntryDto).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

export const zLeagueMatchDto = z.object({
	uuid: z.string(),
	_links: zLinks.optional(),
	_embedded: z
		.union([
			z.object({
				team1: z
					.object({
						uuid: z.string(),
						name: z.string(),
						sportsclubUuid: z.string(),
					})
					.optional(),
				team2: z
					.object({
						uuid: z.string(),
						name: z.string(),
						sportsclubUuid: z.string(),
					})
					.optional(),
			}),
			z.null(),
		])
		.optional(),
	date: z.union([z.string().date(), z.null()]).optional(),
	time: z.union([z.string(), z.null()]).optional(),
	matchNumber: z.union([z.number().int(), z.null()]).optional(),
	decidingMatch: z.union([z.boolean(), z.null()]).optional(),
	gameReassessed: z.union([z.boolean(), z.null()]).optional(),
	host: z.union([z.string(), z.null()]).optional(),
	referees: zRefereeTeamDto.optional().nullable(),
	spectators: z.union([z.number().int(), z.null()]).optional(),
	netDuration: z.union([z.number().int(), z.null()]).optional(),
	verified: z.union([z.boolean(), z.null()]).optional(),
	location: zLocation.optional().nullable(),
	seasonUuid: z.union([z.string(), z.null()]).optional(),
	associationUuid: z.union([z.string(), z.null()]).optional(),
	results: zVolleyballMatchResultsDto.optional().nullable(),
	matchDayUuid: z.union([z.string(), z.null()]).optional(),
	leagueUuid: z.union([z.string(), z.null()]).optional(),
	delayPossible: z.union([z.boolean(), z.null()]).optional(),
	indefinitelyRescheduled: z.union([z.boolean(), z.null()]).optional(),
});

export const zLeagueMatchPage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zLeagueMatchDto).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

export const zLeagueMatchDayDto = z.object({
	uuid: z.string().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	name: z.string().optional(),
	matchdate: z.string().datetime().optional(),
	seasonUuid: z.string().optional(),
	leagueUuid: z.string().optional(),
	associationUuid: z.string().optional(),
});

export const zLeagueMatchDayPage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zLeagueMatchDayDto).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

export const zSuperCompetitionDto = z.object({
	uuid: z.string().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	name: z.string().optional(),
	shortName: z.string().optional(),
	gender: z.enum(["MALE", "FEMALE", "MIXED"]).optional(),
	leagueHierarchyUuid: z.string().optional(),
	seasonUuid: z.string().optional(),
	associationUuid: z.string().optional(),
	superCompetitionUuid: z.string().optional(),
});

export const zSuperCompetitionPage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zSuperCompetitionDto).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

export const zEvent = z.object({
	uuid: z.string().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	name: z.string().optional(),
	shortname: z.string().optional(),
	eventNumber: z.number().int().optional(),
	overridingEventNumber: z.string().optional(),
	dateNotYetKnown: z.boolean().optional(),
	endsAt: z.string().datetime().optional(),
	beginsAt: z.string().datetime().optional(),
	registrationDeadline: z.string().datetime().optional(),
	associationUuid: z.string().optional(),
	canceled: z.boolean().optional(),
	minimumNumberOfParticipants: z.number().int().optional(),
	maximumNumberOfParticipants: z.number().int().optional(),
	usedCapacity: z.number().int().optional(),
	registrationUri: z.string().url().optional(),
	location: zLocation.optional(),
	eventTypeUuid: z.string().optional(),
});

export const zEventPage = z.object({
	totalElements: z.number().int().optional(),
	numberOfElements: z.number().int().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	content: z.array(zEvent).optional(),
	empty: z.boolean().optional(),
	totalPages: z.number().int().optional(),
	first: z.boolean().optional(),
	last: z.boolean().optional(),
});

/**
 * Type of an event.
 */
export const zEventType = z.object({
	uuid: z.string().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	name: z.string().optional(),
	description: z.string().optional(),
	category: z.string().optional(),
	associationUuid: z.string().optional(),
});

export const zSeasonDto = z.array(
	z.object({
		uuid: z.string(),
		_links: zLinks.optional(),
		_embedded: zEmbedded.optional(),
		name: z.string(),
		startDate: z.string(),
		endDate: z.string(),
		currentSeason: z.boolean(),
	}),
);

export const zUserDetailsDto = z.object({
	uuid: z.string().optional(),
	_links: zLinks.optional(),
	_embedded: zEmbedded.optional(),
	firstName: z.string().optional(),
	lastName: z.string().optional(),
	dateOfBirth: z.string().datetime().optional(),
	gender: z.enum(["UNDEFINED", "MALE", "FEMALE", "DIVERS"]).optional(),
	emailAddress: z.string().optional(),
	samsInstance: z.string().optional(),
	refsoftID: z.string().optional(),
});

export const zGetApiBaseLinksData = z.object({
	body: z.never().optional(),
	path: z.never().optional(),
	query: z.never().optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

export const zGetAssociationByUuidData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z.never().optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetAssociationByUuidResponse = zAssociation;

export const zGetAssociationsData = z.object({
	body: z.never().optional(),
	path: z.never().optional(),
	query: z
		.object({
			page: z.number().int().optional(),
			size: z.number().int().optional(),
			association: z.string().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetAssociationsResponse = zAssociationResourcePage;

export const zGetCommitteesForAssociationData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z
		.object({
			page: z.number().int().optional(),
			size: z.number().int().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetCommitteesForAssociationResponse = zCommitteePage;

export const zGetSportsclubsForAssociationData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z
		.object({
			page: z.number().int().optional(),
			size: z.number().int().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetSportsclubsForAssociationResponse = zSportsclubPage;

export const zGetAllCommitteesData = z.object({
	body: z.never().optional(),
	path: z.never().optional(),
	query: z
		.object({
			page: z.number().int().optional(),
			size: z.number().int().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetAllCommitteesResponse = zCommitteePage;

export const zGetCommitteeData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z.never().optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetCommitteeResponse = zCommittee;

export const zGetAllLeagueHierarchiesData = z.object({
	body: z.never().optional(),
	path: z.never().optional(),
	query: z
		.object({
			page: z.number().int().optional(),
			size: z.number().int().optional(),
			"for-season": z.string().optional(),
			association: z.string().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetAllLeagueHierarchiesResponse = zLeagueHierarchyPage;

export const zGetCompetitionsByLeagueHierarchyData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z
		.object({
			page: z.number().int().optional(),
			size: z.number().int().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

export const zGetLeagueHierarchyByUuidData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z.never().optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetLeagueHierarchyByUuidResponse = zLeagueHierarchyDto;

export const zGetLeaguesByLeagueHierarchyData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z
		.object({
			page: z.number().int().optional(),
			size: z.number().int().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

export const zGetSuperCompetitionsByLeagueHierarchyData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z
		.object({
			page: z.number().int().optional(),
			size: z.number().int().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

export const zGetAllLocationsData = z.object({
	body: z.never().optional(),
	path: z.never().optional(),
	query: z
		.object({
			page: z.number().int().optional(),
			size: z.number().int().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Success
 */
export const zGetAllLocationsResponse = zLocationResourcePage;

export const zGetLocationByUuidData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z.never().optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Success
 */
export const zGetLocationByUuidResponse = zLocation;

export const zGetAllCompetitionsData = z.object({
	body: z.never().optional(),
	path: z.never().optional(),
	query: z
		.object({
			page: z.number().int().optional(),
			size: z.number().int().optional(),
			association: z.string().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetAllCompetitionsResponse = zCompetitionPage;

export const zGetCompetitionByUuidData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z.never().optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetCompetitionByUuidResponse = zCompetitionDto;

export const zGetMatchGroupsForCompetitionData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z
		.object({
			page: z.number().int().optional(),
			size: z.number().int().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

export const zGetRankingsForCompetitionData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z
		.object({
			page: z.number().int().optional(),
			size: z.number().int().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetRankingsForCompetitionResponse = zCompetitionRankingsResourcePage;

export const zGetTeamsForCompetitionData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z
		.object({
			page: z.number().int().optional(),
			size: z.number().int().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetTeamsForCompetitionResponse = zTeamPage;

export const zGetAllCompetitionMatchesWithFilterData = z.object({
	body: z.never().optional(),
	path: z.never().optional(),
	query: z
		.object({
			page: z.number().int().optional(),
			size: z.number().int().optional(),
			association: z.string().optional(),
			"for-season": z.string().optional(),
			"for-competition": z.string().optional(),
			"for-sportsclub": z.string().optional(),
			"for-team": z.string().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetAllCompetitionMatchesWithFilterResponse = zCompetitionMatchPage;

export const zGetCompetitionMatchByUuidData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z.never().optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetCompetitionMatchByUuidResponse = zCompetitionMatchDto;

export const zGetAllMatchGroupsData = z.object({
	body: z.never().optional(),
	path: z.never().optional(),
	query: z
		.object({
			page: z.number().int().optional(),
			size: z.number().int().optional(),
			association: z.string().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetAllMatchGroupsResponse = zCompetitionMatchGroupPage;

export const zGetMatchGroupByUuidData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z.never().optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetMatchGroupByUuidResponse = zCompetitionMatchGroupDto;

export const zGetMatchesByMatchGroupData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z
		.object({
			page: z.number().int().optional(),
			size: z.number().int().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

export const zGetAllLeaguesData = z.object({
	body: z.never().optional(),
	path: z.never().optional(),
	query: z
		.object({
			page: z.number().int().optional(),
			size: z.number().int().optional(),
			association: z.string().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetAllLeaguesResponse = zLeaguePage;

export const zGetLeagueByUuidData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z.never().optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetLeagueByUuidResponse = zLeagueDto;

export const zGetMatchDaysForLeagueData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z
		.object({
			page: z.number().int().optional(),
			size: z.number().int().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

export const zGetRankingsForLeagueData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z
		.object({
			page: z.number().int().optional(),
			size: z.number().int().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetRankingsForLeagueResponse = zLeagueRankingsResourcePage;

export const zGetTeamsForLeagueData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z
		.object({
			page: z.number().int().optional(),
			size: z.number().int().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetTeamsForLeagueResponse = zTeamPage;

export const zGetAllLeagueMatchesData = z.object({
	body: z.never().optional(),
	path: z.never().optional(),
	query: z
		.object({
			page: z.number().int().optional(),
			size: z.number().int().optional(),
			association: z.string().optional(),
			"for-season": z.string().optional(),
			"for-league": z.string().optional(),
			"for-sportsclub": z.string().optional(),
			"for-team": z.string().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetAllLeagueMatchesResponse = zLeagueMatchPage;

export const zGetLeagueMatchByUuidData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z.never().optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetLeagueMatchByUuidResponse = zLeagueMatchDto;

export const zGetAllMatchDaysData = z.object({
	body: z.never().optional(),
	path: z.never().optional(),
	query: z
		.object({
			page: z.number().int().optional(),
			size: z.number().int().optional(),
			association: z.string().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetAllMatchDaysResponse = zLeagueMatchDayPage;

export const zGetMatchDayByUuidData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z.never().optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetMatchDayByUuidResponse = zLeagueMatchDayDto;

export const zGetMatchesByMatchDayData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z
		.object({
			page: z.number().int().optional(),
			size: z.number().int().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetMatchesByMatchDayResponse = zLeagueMatchPage;

export const zGetAllSuperCompetitionsData = z.object({
	body: z.never().optional(),
	path: z.never().optional(),
	query: z
		.object({
			page: z.number().int().optional(),
			size: z.number().int().optional(),
			association: z.string().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetAllSuperCompetitionsResponse = zSuperCompetitionPage;

export const zGetSuperCompetitionByUuidData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z.never().optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetSuperCompetitionByUuidResponse = zSuperCompetitionDto;

export const zGetAllEventsData = z.object({
	body: z.never().optional(),
	path: z.never().optional(),
	query: z
		.object({
			page: z.number().int().optional(),
			size: z.number().int().optional(),
			association: z.string().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetAllEventsResponse = zEventPage;

export const zGetEventByUuidData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z.never().optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetEventByUuidResponse = zEvent;

export const zGetEventTypeByUuidData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z.never().optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetEventTypeByUuidResponse = zEventType;

export const zGetEventTypesData = z.object({
	body: z.never().optional(),
	path: z.never().optional(),
	query: z
		.object({
			association: z.string().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetEventTypesResponse = zEventType;

export const zGetAllSeasonsData = z.object({
	body: z.never().optional(),
	path: z.never().optional(),
	query: z.never().optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetAllSeasonsResponse = zSeasonDto;

export const zGetLeagueHierarchiesForSeasonData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z
		.object({
			page: z.number().int().optional(),
			size: z.number().int().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

export const zGetSeasonByUuidData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z.never().optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetSeasonByUuidResponse = zSeasonDto;

export const zGetAllSportsclubsData = z.object({
	body: z.never().optional(),
	path: z.never().optional(),
	query: z
		.object({
			page: z.number().int().optional(),
			size: z.number().int().optional(),
			association: z.string().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetAllSportsclubsResponse = zSportsclubPage;

export const zGetSportsclubData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z.never().optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetSportsclubResponse = zSportsclubDto;

export const zGetAllTeamsData = z.object({
	body: z.never().optional(),
	path: z.never().optional(),
	query: z
		.object({
			page: z.number().int().optional(),
			size: z.number().int().optional(),
			association: z.string().optional(),
		})
		.optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetAllTeamsResponse = zTeamPage;

export const zGetTeamByUuidData = z.object({
	body: z.never().optional(),
	path: z.object({
		uuid: z.string(),
	}),
	query: z.never().optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetTeamByUuidResponse = zTeamDto;

export const zGetCurrentUserData = z.object({
	body: z.never().optional(),
	path: z.never().optional(),
	query: z.never().optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zGetCurrentUserResponse = zUserDetailsDto;

export const zUserDetailsRootLinksData = z.object({
	body: z.never().optional(),
	path: z.never().optional(),
	query: z.never().optional(),
	headers: z
		.object({
			"X-Api-Key": z.string().optional(),
		})
		.optional(),
});

/**
 * Successful operation
 */
export const zUserDetailsRootLinksResponse = zHalRepresentation;
