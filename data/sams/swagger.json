{
  "openapi": "3.0.1",
  "info": {
    "title": "SAMS REST API v2",
    "description": "The SAMS public REST API",
    "version": "2.1"
  },
  "servers": [
    {
      "url": "/api/v2/"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "SAMS REST API v2"
        ],
        "summary": "Links to the API's resources",
        "operationId": "getApiBaseLinks",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          }
        }
      }
    },
    "/associations/{uuid}": {
      "get": {
        "tags": [
          "SAMS associations API"
        ],
        "summary": "Returns an association identified by the given UUID",
        "operationId": "getAssociationByUuid",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "description": "UUID of the requested association",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Association"
                }
              }
            }
          }
        }
      }
    },
    "/associations": {
      "get": {
        "tags": [
          "SAMS associations API"
        ],
        "summary": "Returns all available associations.",
        "description": "Returns all available association as a paged list. The default page size is 20. The page size must not be greater than 100",
        "operationId": "getAssociations",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page number. Defaults to the first page (i.e. page number 0).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested number of items per page. Defaults to 20. The maximum allowed value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "association",
            "in": "query",
            "description": "Filter for association using the given UUID. Defaults to no filtering.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationResourcePage"
                }
              }
            }
          }
        }
      }
    },
    "/associations/{uuid}/committees": {
      "get": {
        "tags": [
          "SAMS associations API"
        ],
        "summary": "Returns the list of committees.",
        "description": "Returns the list of committees for an association as a paged list. The default page size is The returned committees list their respective members including the members' publicly available contact information.20. The page size must not be greater than 100",
        "operationId": "getCommitteesForAssociation",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "description": "UUID of the association whose committees are requested",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page number. Defaults to the first page (i.e. page number 0).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested number of items per page. Defaults to 20. The maximum allowed value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitteePage"
                }
              }
            }
          }
        }
      }
    },
    "/associations/{uuid}/sportsclubs": {
      "get": {
        "tags": [
          "SAMS associations API"
        ],
        "description": "Returns the list of sportsclubs belonging to the association identified by the specified UUID as a paged list. The default page size is 20. The page size must not be greater than 100",
        "operationId": "getSportsclubsForAssociation",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "description": "UUID of the association whose committees are requested",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page number. Defaults to the first page (i.e. page number 0).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested number of items per page. Defaults to 20. The maximum allowed value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SportsclubPage"
                }
              }
            }
          }
        }
      }
    },
    "/committees": {
      "get": {
        "tags": [
          "SAMS committees API"
        ],
        "summary": "Returns the list of available committees as a paged list.",
        "description": "Returns all committees belonging to the association which can be accessed with the used API key. The returned committees list their respective members including the members' publicly available contact information. The default page size is 20. The page size must not be greater than 100",
        "operationId": "getAllCommittees",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page number. Defaults to the first page (i.e. page number 0).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested number of items per page. Defaults to 20. The maximum allowed value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/CommitteePage"
                }
              }
            }
          }
        }
      }
    },
    "/committees/{uuid}": {
      "get": {
        "tags": [
          "SAMS committees API"
        ],
        "summary": "Returns a committee identified by the given UUID",
        "description": "Returns the requested committee if it belongs to the association which can be accessed with the used API key. The returned committee lists its respective members including the members' publicly available contact information.",
        "operationId": "getCommittee",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/Committee"
                }
              }
            }
          }
        }
      }
    },
    "/league-hierarchies": {
      "get": {
        "tags": [
          "SAMS league hierarchies API"
        ],
        "summary": "Returns all available league hierarchy elements as a paged list.",
        "description": "The default page size is 20. The page size must not be greater than 100. The result list can be filtered for a particular season.",
        "operationId": "getAllLeagueHierarchies",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page number. Defaults to the first page (i.e. page number 0).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested number of items per page. Defaults to 20. The maximum allowed value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "for-season",
            "in": "query",
            "description": "Filter for the season. UUID of the season to which the league hierarchy belongs.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "association",
            "in": "query",
            "description": "Filter for association using the given UUID. Defaults to no filtering.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/LeagueHierarchyPage"
                }
              }
            }
          }
        }
      }
    },
    "/league-hierarchies/{uuid}/competitions": {
      "get": {
        "tags": [
          "SAMS league hierarchies API"
        ],
        "operationId": "getCompetitionsByLeagueHierarchy",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page number. Defaults to the first page (i.e. page number 0).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested number of items per page. Defaults to 20. The maximum allowed value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          }
        }
      }
    },
    "/league-hierarchies/{uuid}": {
      "get": {
        "tags": [
          "SAMS league hierarchies API"
        ],
        "summary": "Returns a league hierarchy element identified by the given UUID",
        "operationId": "getLeagueHierarchyByUuid",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/LeagueHierarchyDto"
                }
              }
            }
          }
        }
      }
    },
    "/league-hierarchies/{uuid}/leagues": {
      "get": {
        "tags": [
          "SAMS league hierarchies API"
        ],
        "operationId": "getLeaguesByLeagueHierarchy",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page number. Defaults to the first page (i.e. page number 0).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested number of items per page. Defaults to 20. The maximum allowed value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          }
        }
      }
    },
    "/league-hierarchies/{uuid}/super-competitions": {
      "get": {
        "tags": [
          "SAMS league hierarchies API"
        ],
        "operationId": "getSuperCompetitionsByLeagueHierarchy",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page number. Defaults to the first page (i.e. page number 0).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested number of items per page. Defaults to 20. The maximum allowed value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          }
        }
      }
    },
    "/locations": {
      "get": {
        "tags": [
          "SAMS locations API"
        ],
        "summary": "Returns all available locations as a paged list.",
        "description": "The default page size is 20. The page size must not be greater than 100",
        "operationId": "getAllLocations",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page number. Defaults to the first page (i.e. page number 0).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested number of items per page. Defaults to 20. The maximum allowed value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "default": {
            "description": "Success",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/LocationResourcePage"
                }
              }
            }
          }
        }
      }
    },
    "/locations/{uuid}": {
      "get": {
        "tags": [
          "SAMS locations API"
        ],
        "summary": "Returns a location element identified by the given UUID",
        "description": "Returns a location element identified by the given UUID",
        "operationId": "getLocationByUuid",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "default": {
            "description": "Success",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          }
        }
      }
    },
    "/competitions": {
      "get": {
        "tags": [
          "SAMS competitions API"
        ],
        "summary": "Returns all available competitions as a paged list.",
        "description": "The default page size is 20. The page size must not be greater than 100",
        "operationId": "getAllCompetitions",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page number. Defaults to the first page (i.e. page number 0).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested number of items per page. Defaults to 20. The maximum allowed value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "association",
            "in": "query",
            "description": "Filter for association using the given UUID. Defaults to no filtering.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/CompetitionPage"
                }
              }
            }
          }
        }
      }
    },
    "/competitions/{uuid}": {
      "get": {
        "tags": [
          "SAMS competitions API"
        ],
        "summary": "Returns a competition identified by the given UUID",
        "operationId": "getCompetitionByUuid",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/CompetitionDto"
                }
              }
            }
          }
        }
      }
    },
    "/competitions/{uuid}/match-groups": {
      "get": {
        "tags": [
          "SAMS competitions API"
        ],
        "operationId": "getMatchGroupsForCompetition",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page number. Defaults to the first page (i.e. page number 0).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested number of items per page. Defaults to 20. The maximum allowed value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          }
        }
      }
    },
    "/competitions/{uuid}/rankings": {
      "get": {
        "tags": [
          "SAMS competitions API"
        ],
        "summary": "Returns the rankings of a competition identified by the given UUID.",
        "operationId": "getRankingsForCompetition",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page number. Defaults to the first page (i.e. page number 0).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested number of items per page. Defaults to 20. The maximum allowed value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/CompetitionRankingsResourcePage"
                }
              }
            }
          }
        }
      }
    },
    "/competitions/{uuid}/teams": {
      "get": {
        "tags": [
          "SAMS competitions API"
        ],
        "summary": "Returns all teams of a competition identified by the given UUID as a paged list. ",
        "description": "The default page size is 20. The page size must not be greater than 100",
        "operationId": "getTeamsForCompetition",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page number. Defaults to the first page (i.e. page number 0).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested number of items per page. Defaults to 20. The maximum allowed value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TeamPage"
                }
              }
            }
          }
        }
      }
    },
    "/competition-matches": {
      "get": {
        "tags": [
          "SAMS competition matches API"
        ],
        "summary": "Returns all available competition matches as a paged list.",
        "description": "The default page size is 20. The page size must not be greater than 100. The result list can be filtered for a particular season, competition, sports club, or team by passing the UUID of the entity for which to filter as a filter query parameter. The filters will be combined with AND semantics.",
        "operationId": "getAllCompetitionMatchesWithFilter",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page number. Defaults to the first page (i.e. page number 0).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested number of items per page. Defaults to 20. The maximum allowed value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "association",
            "in": "query",
            "description": "Filter for association using the given UUID. Defaults to no filtering.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "for-season",
            "in": "query",
            "description": "Filter by season UUID: Find all matches from a particular season.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "for-competition",
            "in": "query",
            "description": "Filter by competition UUID: Find all matches from a particular competition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "for-sportsclub",
            "in": "query",
            "description": "Filter by sports club UUID: Find all matches for a particular sports club.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "for-team",
            "in": "query",
            "description": "Filter by team UUID: Find all matches attended by a particular team.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/CompetitionMatchPage"
                }
              }
            }
          }
        }
      }
    },
    "/competition-matches/{uuid}": {
      "get": {
        "tags": [
          "SAMS competition matches API"
        ],
        "summary": "Returns a competition match identified by the given UUID",
        "operationId": "getCompetitionMatchByUuid",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/CompetitionMatchDto"
                }
              }
            }
          }
        }
      }
    },
    "/match-groups": {
      "get": {
        "tags": [
          "SAMS match groups API"
        ],
        "summary": "Returns all available match groups as a paged list. The default page size is 20. The page size must not be greater than 100",
        "operationId": "getAllMatchGroups",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page number. Defaults to the first page (i.e. page number 0).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested number of items per page. Defaults to 20. The maximum allowed value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "association",
            "in": "query",
            "description": "Filter for association using the given UUID. Defaults to no filtering.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/CompetitionMatchGroupPage"
                }
              }
            }
          }
        }
      }
    },
    "/match-groups/{uuid}": {
      "get": {
        "tags": [
          "SAMS match groups API"
        ],
        "summary": "Returns a match group identified by the given UUID",
        "operationId": "getMatchGroupByUuid",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/CompetitionMatchGroupDto"
                }
              }
            }
          }
        }
      }
    },
    "/match-groups/{uuid}/competition-matches": {
      "get": {
        "tags": [
          "SAMS match groups API"
        ],
        "operationId": "getMatchesByMatchGroup",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page number. Defaults to the first page (i.e. page number 0).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested number of items per page. Defaults to 20. The maximum allowed value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          }
        }
      }
    },
    "/leagues": {
      "get": {
        "tags": [
          "SAMS leagues API"
        ],
        "summary": "Returns all available leagues as a paged list. The default page size is 20. The page size must not be greater than 100",
        "operationId": "getAllLeagues",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page number. Defaults to the first page (i.e. page number 0).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested number of items per page. Defaults to 20. The maximum allowed value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "association",
            "in": "query",
            "description": "Filter for association using the given UUID. Defaults to no filtering.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/LeaguePage"
                }
              }
            }
          }
        }
      }
    },
    "/leagues/{uuid}": {
      "get": {
        "tags": [
          "SAMS leagues API"
        ],
        "summary": "Returns a league identified by the given UUID",
        "operationId": "getLeagueByUuid",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/LeagueDto"
                }
              }
            }
          }
        }
      }
    },
    "/leagues/{uuid}/match-days": {
      "get": {
        "tags": [
          "SAMS leagues API"
        ],
        "operationId": "getMatchDaysForLeague",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page number. Defaults to the first page (i.e. page number 0).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested number of items per page. Defaults to 20. The maximum allowed value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          }
        }
      }
    },
    "/leagues/{uuid}/rankings": {
      "get": {
        "tags": [
          "SAMS leagues API"
        ],
        "summary": "Returns the rankings of a league identified by the given UUID.",
        "operationId": "getRankingsForLeague",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page number. Defaults to the first page (i.e. page number 0).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested number of items per page. Defaults to 20. The maximum allowed value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/LeagueRankingsResourcePage"
                }
              }
            }
          }
        }
      }
    },
    "/leagues/{uuid}/teams": {
      "get": {
        "tags": [
          "SAMS leagues API"
        ],
        "summary": "Returns all teams of a league identified by the given UUID as a paged list. The default page size is 20. The page size must not be greater than 100",
        "operationId": "getTeamsForLeague",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page number. Defaults to the first page (i.e. page number 0).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested number of items per page. Defaults to 20. The maximum allowed value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TeamPage"
                }
              }
            }
          }
        }
      }
    },
    "/league-matches": {
      "get": {
        "tags": [
          "SAMS league matches API"
        ],
        "summary": "Returns all available league matches as a paged list.",
        "description": "The default page size is 20. The page size must not be greater than 100. The result list can be filtered for a particular season, league, sports club, or team by passing the UUID of the entity for which to filter as a filter query parameter. The filters will be combined with AND semantics.",
        "operationId": "getAllLeagueMatches",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page number. Defaults to the first page (i.e. page number 0).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested number of items per page. Defaults to 20. The maximum allowed value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "association",
            "in": "query",
            "description": "Filter for association using the given UUID. Defaults to no filtering.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "for-season",
            "in": "query",
            "description": "Filter by season UUID: Find all matches from a particular season.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "for-league",
            "in": "query",
            "description": "Filter by league UUID: Find all matches from a particular league.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "for-sportsclub",
            "in": "query",
            "description": "Filter by sports club UUID: Find all matches for a particular sports club.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "for-team",
            "in": "query",
            "description": "Filter by team UUID: Find all matches attended by a particular team.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/LeagueMatchPage"
                }
              }
            }
          }
        }
      }
    },
    "/league-matches/{uuid}": {
      "get": {
        "tags": [
          "SAMS league matches API"
        ],
        "summary": "Returns a league match identified by the given UUID",
        "operationId": "getLeagueMatchByUuid",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/LeagueMatchDto"
                }
              }
            }
          }
        }
      }
    },
    "/match-days": {
      "get": {
        "tags": [
          "SAMS match days API"
        ],
        "summary": "Returns all available match days as a paged list.",
        "description": "The default page size is 20. The page size must not be greater than 100",
        "operationId": "getAllMatchDays",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page number. Defaults to the first page (i.e. page number 0).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested number of items per page. Defaults to 20. The maximum allowed value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "association",
            "in": "query",
            "description": "Filter for association using the given UUID. Defaults to no filtering.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/LeagueMatchDayPage"
                }
              }
            }
          }
        }
      }
    },
    "/match-days/{uuid}": {
      "get": {
        "tags": [
          "SAMS match days API"
        ],
        "summary": "Returns a match day identified by the given UUID",
        "operationId": "getMatchDayByUuid",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/LeagueMatchDayDto"
                }
              }
            }
          }
        }
      }
    },
    "/match-days/{uuid}/league-matches": {
      "get": {
        "tags": [
          "SAMS match days API"
        ],
        "summary": "Returns all matches of a match day based on the given UUID. The default page size is 20. The page size must not be greater than 100",
        "operationId": "getMatchesByMatchDay",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page number. Defaults to the first page (i.e. page number 0).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested number of items per page. Defaults to 20. The maximum allowed value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/LeagueMatchPage"
                }
              }
            }
          }
        }
      }
    },
    "/super-competitions": {
      "get": {
        "tags": [
          "SAMS super competitions API"
        ],
        "summary": "Returns all available super competitions as a paged list.",
        "description": "The default page size is 20. The page size must not be greater than 100. The sub-competitions belonging to each super competition are added as an _embedded entity list.",
        "operationId": "getAllSuperCompetitions",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page number. Defaults to the first page (i.e. page number 0).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested number of items per page. Defaults to 20. The maximum allowed value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "association",
            "in": "query",
            "description": "Filter for association using the given UUID. Defaults to no filtering.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/SuperCompetitionPage"
                }
              }
            }
          }
        }
      }
    },
    "/super-competitions/{uuid}": {
      "get": {
        "tags": [
          "SAMS super competitions API"
        ],
        "summary": "Returns a super competition identified by the given UUID",
        "operationId": "getSuperCompetitionByUuid",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/SuperCompetitionDto"
                }
              }
            }
          }
        }
      }
    },
    "/events": {
      "get": {
        "tags": [
          "SAMS events API"
        ],
        "summary": "Returns all available events as a paged list. The default page size is 20. The page size must not be greater than 100",
        "operationId": "getAllEvents",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page number. Defaults to the first page (i.e. page number 0).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested number of items per page. Defaults to 20. The maximum allowed value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "association",
            "in": "query",
            "description": "Filter for association using the given UUID. Defaults to no filtering.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventPage"
                }
              }
            }
          }
        }
      }
    },
    "/events/{uuid}": {
      "get": {
        "tags": [
          "SAMS events API"
        ],
        "summary": "Returns an event identified by the given UUID",
        "operationId": "getEventByUuid",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "description": "UUID of the requested event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          }
        }
      }
    },
    "/event-types/{uuid}": {
      "get": {
        "tags": [
          "SAMS event types API"
        ],
        "summary": "Returns an event type identified by the given UUID",
        "operationId": "getEventTypeByUuid",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "description": "UUID of the requested event type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventType"
                }
              }
            }
          }
        }
      }
    },
    "/event-types": {
      "get": {
        "tags": [
          "SAMS event types API"
        ],
        "summary": "Returns all available event types.",
        "operationId": "getEventTypes",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "association",
            "in": "query",
            "description": "Filter for association using the given UUID. Defaults to no filtering.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventType"
                }
              }
            }
          }
        }
      }
    },
    "/seasons": {
      "get": {
        "tags": [
          "SAMS seasons API"
        ],
        "summary": "Returns all available seasons",
        "operationId": "getAllSeasons",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/SeasonDto"
                }
              }
            }
          }
        }
      }
    },
    "/seasons/{uuid}/league-hierarchies": {
      "get": {
        "tags": [
          "SAMS seasons API"
        ],
        "operationId": "getLeagueHierarchiesForSeason",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page number. Defaults to the first page (i.e. page number 0).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested number of items per page. Defaults to 20. The maximum allowed value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          }
        }
      }
    },
    "/seasons/{uuid}": {
      "get": {
        "tags": [
          "SAMS seasons API"
        ],
        "summary": "Returns a season identified by the given UUID",
        "operationId": "getSeasonByUuid",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/SeasonDto"
                }
              }
            }
          }
        }
      }
    },
    "/sportsclubs": {
      "get": {
        "tags": [
          "SAMS sports clubs API"
        ],
        "summary": "Returns all available sports clubs.",
        "description": "The default page size is 20. The page size must not be greater than 100",
        "operationId": "getAllSportsclubs",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page number. Defaults to the first page (i.e. page number 0).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested number of items per page. Defaults to 20. The maximum allowed value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "association",
            "in": "query",
            "description": "Filter for association using the given UUID. Defaults to no filtering.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/SportsclubPage"
                }
              }
            }
          }
        }
      }
    },
    "/sportsclubs/{uuid}": {
      "get": {
        "tags": [
          "SAMS sports clubs API"
        ],
        "summary": "Returns a sports club identified by the given UUID.",
        "operationId": "getSportsclub",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/SportsclubDto"
                }
              }
            }
          }
        }
      }
    },
    "/teams": {
      "get": {
        "tags": [
          "SAMS teams API"
        ],
        "summary": "Returns all available teams as a paged list.",
        "description": "The default page size is 20. The page size must not be greater than 100",
        "operationId": "getAllTeams",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page number. Defaults to the first page (i.e. page number 0).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested number of items per page. Defaults to 20. The maximum allowed value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "association",
            "in": "query",
            "description": "Filter for association using the given UUID. Defaults to no filtering.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TeamPage"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{uuid}": {
      "get": {
        "tags": [
          "SAMS teams API"
        ],
        "summary": "Returns a team identified by the given UUID",
        "operationId": "getTeamByUuid",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TeamDto"
                }
              }
            }
          }
        }
      }
    },
    "/user-details/current": {
      "get": {
        "tags": [
          "SAMS user API"
        ],
        "summary": "Retrieves the user data for the current user identified by the mandatory JSON web token authorization header",
        "operationId": "getCurrentUser",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetailsDto"
                }
              }
            }
          }
        }
      }
    },
    "/user-details": {
      "get": {
        "tags": [
          "SAMS user API"
        ],
        "summary": "Provides links to sub resources",
        "operationId": "userDetailsRootLinks",
        "parameters": [
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "A SAMS API key with permission to access this API.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "POST only: A violation occurred while validating the processed request data, for example caused by an invalid email address. Check the response for further details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to invalid request data. Check the response for more details.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "403": {
            "description": "API authorization failed.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseExceptionMessage"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred. Please contact support and supply the response data.",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseException"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/HalRepresentation"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ConstraintViolation": {
        "type": "object",
        "properties": {
          "constraint": {
            "type": "string"
          },
          "property": {
            "type": "string"
          },
          "entity": {
            "type": "string"
          },
          "invalidValue": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "violations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConstraintViolation"
            }
          }
        }
      },
      "ResponseExceptionMessage": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "ResponseException": {
        "type": "object",
        "properties": {
          "exception": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Association": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Entity unique identifier"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "name": {
            "type": "string"
          },
          "shortname": {
            "type": "string"
          },
          "parentUuid": {
            "type": "string"
          },
          "level": {
            "type": "integer",
            "description": "Zero-based hierarchy level for the association. For top-level associations, the level is 0.",
            "format": "int32"
          }
        }
      },
      "Embedded": {
        "type": "object",
        "properties": {
          "empty": {
            "type": "boolean"
          }
        }
      },
      "HalRepresentation": {
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          }
        }
      },
      "Links": {
        "type": "object",
        "properties": {
          "empty": {
            "type": "boolean"
          }
        }
      },
      "AssociationResourcePage": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Association"
            }
          },
          "empty": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "street": {
            "type": "string"
          },
          "postcode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "extrafield": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "postbox": {
            "type": "string"
          }
        },
        "description": "Address for a location or a person. An address object may be null if no address data is available. For persons this might be the case if the address visibility has been set to private."
      },
      "Committee": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Entity unique identifier"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "associationUuid": {
            "type": "string",
            "description": "Reference to the association this entity belongs to"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommitteeMember"
            }
          },
          "name": {
            "type": "string"
          },
          "shortname": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "imageLink": {
            "type": "string",
            "format": "url"
          }
        }
      },
      "CommitteeMember": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "committeeUuid": {
            "type": "string",
            "description": "Reference to the committee"
          },
          "additionalTitle": {
            "type": "string"
          },
          "sourceFunction": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "phoneMobile": {
            "type": "string"
          },
          "fax": {
            "type": "string"
          },
          "phoneWork": {
            "type": "string"
          },
          "faxWork": {
            "type": "string"
          },
          "phoneMobileWork": {
            "type": "string"
          },
          "portraitPhotoLink": {
            "type": "string",
            "format": "url"
          }
        },
        "description": "A member of a committee. Personal data may be null if its visibility has been restricted."
      },
      "CommitteePage": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Committee"
            }
          },
          "empty": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          }
        }
      },
      "SportsclubDto": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Entity unique identifier"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "name": {
            "type": "string"
          },
          "shortname": {
            "type": "string"
          },
          "sportsclubNumber": {
            "type": "integer",
            "format": "int64"
          },
          "associationUuid": {
            "type": "string"
          },
          "logoImageLink": {
            "type": "string",
            "format": "url"
          }
        }
      },
      "SportsclubPage": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SportsclubDto"
            }
          },
          "empty": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          }
        }
      },
      "LeagueHierarchyDto": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Entity unique identifier"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "name": {
            "type": "string"
          },
          "shortName": {
            "type": "string"
          },
          "seasonUuid": {
            "type": "string"
          },
          "associationUuid": {
            "type": "string"
          },
          "level": {
            "type": "integer",
            "format": "int32"
          },
          "parentLeagueHierarchyUuid": {
            "type": "string"
          }
        }
      },
      "LeagueHierarchyPage": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeagueHierarchyDto"
            }
          },
          "empty": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          }
        }
      },
      "Location": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Location unique identifier"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "name": {
            "type": "string"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          }
        },
        "description": "A location comprises the location's name, its address, and its geographical coordinates if available"
      },
      "LocationResourcePage": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Location"
            }
          },
          "empty": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          }
        }
      },
      "CompetitionDto": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Entity unique identifier"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "name": {
            "type": "string"
          },
          "shortName": {
            "type": "string"
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "MIXED"
            ]
          },
          "leagueHierarchyUuid": {
            "type": "string"
          },
          "seasonUuid": {
            "type": "string"
          },
          "associationUuid": {
            "type": "string"
          },
          "superCompetitionUuid": {
            "type": "string",
            "description": "If this competition is the sub-competition of a super competition then this UUID points to this super competition."
          }
        }
      },
      "CompetitionPage": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompetitionDto"
            }
          },
          "empty": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          }
        }
      },
      "CompetitionMatchGroupRankingsDto": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Entity unique identifier"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "matchGroupName": {
            "type": "string"
          },
          "rankings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeagueRankingsEntryDto"
            }
          }
        }
      },
      "CompetitionRankingsResourcePage": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompetitionMatchGroupRankingsDto"
            }
          },
          "empty": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          }
        }
      },
      "LeagueRankingsEntryDto": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Entity unique identifier"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "teamName": {
            "type": "string"
          },
          "rank": {
            "type": "integer",
            "format": "int32"
          },
          "matchesPlayed": {
            "type": "integer",
            "format": "int32"
          },
          "points": {
            "type": "integer",
            "format": "int32"
          },
          "scoreIncludingLosses": {
            "type": "string"
          },
          "wins": {
            "type": "integer",
            "format": "int32"
          },
          "losses": {
            "type": "integer",
            "format": "int32"
          },
          "setWins": {
            "type": "integer",
            "format": "int32"
          },
          "setLosses": {
            "type": "integer",
            "format": "int32"
          },
          "setDifference": {
            "type": "integer",
            "format": "int32"
          },
          "setRatio": {
            "type": "number",
            "format": "float"
          },
          "ballWins": {
            "type": "integer",
            "format": "int32"
          },
          "ballLosses": {
            "type": "integer",
            "format": "int32"
          },
          "ballDifference": {
            "type": "integer",
            "format": "int32"
          },
          "ballRatio": {
            "type": "number",
            "format": "float"
          },
          "resultTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchResultTypeCount"
            }
          }
        }
      },
      "MatchResultTypeCount": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TeamDto": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Entity unique identifier"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "masterTeamUuid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "shortName": {
            "type": "string"
          },
          "teamNumber": {
            "type": "integer",
            "format": "int32"
          },
          "clubCode": {
            "type": "string"
          },
          "logoImageLink": {
            "type": "string",
            "format": "url"
          },
          "sportsclubUuid": {
            "type": "string"
          },
          "associationUuid": {
            "type": "string"
          }
        }
      },
      "TeamPage": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamDto"
            }
          },
          "empty": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          }
        }
      },
      "CompetitionMatchDto": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Entity unique identifier"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "time": {
            "type": "string"
          },
          "matchNumber": {
            "type": "integer",
            "format": "int32"
          },
          "decidingMatch": {
            "type": "boolean"
          },
          "gameReassessed": {
            "type": "boolean"
          },
          "host": {
            "type": "string"
          },
          "referees": {
            "$ref": "#/components/schemas/RefereeTeamDto"
          },
          "spectators": {
            "type": "integer",
            "format": "int32"
          },
          "netDuration": {
            "type": "integer",
            "format": "int32"
          },
          "verified": {
            "type": "boolean"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "seasonUuid": {
            "type": "string"
          },
          "associationUuid": {
            "type": "string"
          },
          "results": {
            "$ref": "#/components/schemas/VolleyballMatchResultsDto"
          },
          "matchGroupUuid": {
            "type": "string"
          },
          "competitionUuid": {
            "type": "string"
          },
          "delayPossible": {
            "type": "boolean"
          },
          "indefinitelyRescheduled": {
            "type": "boolean"
          }
        }
      },
      "CompetitionMatchPage": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompetitionMatchDto"
            }
          },
          "empty": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          }
        }
      },
      "RefereeTeamDto": {
        "type": "object",
        "properties": {
          "firstReferee": {
            "type": "string"
          },
          "secondReferee": {
            "type": "string"
          },
          "challengeReferee": {
            "type": "string"
          }
        }
      },
      "VolleyballMatchResultsDto": {
        "type": "object",
        "properties": {
          "winner": {
            "type": "string"
          },
          "winnerName": {
            "type": "string"
          },
          "setPoints": {
            "type": "string"
          },
          "ballPoints": {
            "type": "string"
          },
          "sets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VolleyballMatchSetRestDto"
            }
          }
        }
      },
      "VolleyballMatchSetRestDto": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "ballPoints": {
            "type": "string"
          },
          "winner": {
            "type": "string"
          },
          "winnerName": {
            "type": "string"
          },
          "duration": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CompetitionMatchGroupDto": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Entity unique identifier"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "name": {
            "type": "string"
          },
          "tourneyLevel": {
            "type": "integer",
            "format": "int32"
          },
          "seasonUuid": {
            "type": "string"
          },
          "competitionUuid": {
            "type": "string"
          },
          "associationUuid": {
            "type": "string"
          }
        }
      },
      "CompetitionMatchGroupPage": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompetitionMatchGroupDto"
            }
          },
          "empty": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          }
        }
      },
      "LeagueDto": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Entity unique identifier"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "name": {
            "type": "string"
          },
          "shortName": {
            "type": "string"
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "MIXED"
            ]
          },
          "leagueHierarchyUuid": {
            "type": "string"
          },
          "seasonUuid": {
            "type": "string"
          },
          "associationUuid": {
            "type": "string"
          }
        }
      },
      "LeaguePage": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeagueDto"
            }
          },
          "empty": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          }
        }
      },
      "LeagueRankingsResourcePage": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeagueRankingsEntryDto"
            }
          },
          "empty": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          }
        }
      },
      "LeagueMatchDto": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Entity unique identifier"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "time": {
            "type": "string"
          },
          "matchNumber": {
            "type": "integer",
            "format": "int32"
          },
          "decidingMatch": {
            "type": "boolean"
          },
          "gameReassessed": {
            "type": "boolean"
          },
          "host": {
            "type": "string"
          },
          "referees": {
            "$ref": "#/components/schemas/RefereeTeamDto"
          },
          "spectators": {
            "type": "integer",
            "format": "int32"
          },
          "netDuration": {
            "type": "integer",
            "format": "int32"
          },
          "verified": {
            "type": "boolean"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "seasonUuid": {
            "type": "string"
          },
          "associationUuid": {
            "type": "string"
          },
          "results": {
            "$ref": "#/components/schemas/VolleyballMatchResultsDto"
          },
          "matchDayUuid": {
            "type": "string"
          },
          "leagueUuid": {
            "type": "string"
          },
          "delayPossible": {
            "type": "boolean"
          },
          "indefinitelyRescheduled": {
            "type": "boolean"
          }
        }
      },
      "LeagueMatchPage": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeagueMatchDto"
            }
          },
          "empty": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          }
        }
      },
      "LeagueMatchDayDto": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Entity unique identifier"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "name": {
            "type": "string"
          },
          "matchdate": {
            "type": "string",
            "format": "date-time"
          },
          "seasonUuid": {
            "type": "string"
          },
          "leagueUuid": {
            "type": "string"
          },
          "associationUuid": {
            "type": "string"
          }
        }
      },
      "LeagueMatchDayPage": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeagueMatchDayDto"
            }
          },
          "empty": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          }
        }
      },
      "SuperCompetitionDto": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Entity unique identifier"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "name": {
            "type": "string"
          },
          "shortName": {
            "type": "string"
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "MIXED"
            ]
          },
          "leagueHierarchyUuid": {
            "type": "string"
          },
          "seasonUuid": {
            "type": "string"
          },
          "associationUuid": {
            "type": "string"
          },
          "superCompetitionUuid": {
            "type": "string",
            "description": "If this competition is the sub-competition of a super competition then this UUID points to this super competition."
          }
        }
      },
      "SuperCompetitionPage": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuperCompetitionDto"
            }
          },
          "empty": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          }
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Event unique identifier"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "name": {
            "type": "string"
          },
          "shortname": {
            "type": "string"
          },
          "eventNumber": {
            "type": "integer",
            "format": "int32"
          },
          "overridingEventNumber": {
            "type": "string"
          },
          "dateNotYetKnown": {
            "type": "boolean",
            "description": "True if no start and end date has been set yet"
          },
          "endsAt": {
            "type": "string",
            "format": "date-time"
          },
          "beginsAt": {
            "type": "string",
            "description": "Start date for an event. Is null if dateNotYetKnown is true",
            "format": "date-time"
          },
          "registrationDeadline": {
            "type": "string",
            "format": "date-time"
          },
          "associationUuid": {
            "type": "string"
          },
          "canceled": {
            "type": "boolean",
            "description": "True if the event has been canceled"
          },
          "minimumNumberOfParticipants": {
            "type": "integer",
            "format": "int32"
          },
          "maximumNumberOfParticipants": {
            "type": "integer",
            "format": "int32"
          },
          "usedCapacity": {
            "type": "integer",
            "description": "Number of registered participants for an event. If this event is a subordinate event, i.e. there is a higher level event, then this value is calculated as the sum of all participants of the higher level event and all participants of this higher level event's subordinate event. If this event has subordinate events, then this value is calculated as the sum of participants of this event and all its subordinate events.",
            "format": "int32"
          },
          "registrationUri": {
            "type": "string",
            "format": "uri"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "eventTypeUuid": {
            "type": "string",
            "description": "Reference to the type details for this event"
          }
        }
      },
      "EventPage": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "empty": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          }
        }
      },
      "EventType": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Entity unique identifier"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "associationUuid": {
            "type": "string"
          }
        },
        "description": "Type of an event."
      },
      "SeasonDto": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Entity unique identifier"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "name": {
            "type": "string"
          },
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          },
          "currentSeason": {
            "type": "boolean"
          }
        }
      },
      "UserDetailsDto": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Entity unique identifier"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "_embedded": {
            "$ref": "#/components/schemas/Embedded"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "gender": {
            "type": "string",
            "enum": [
              "UNDEFINED",
              "MALE",
              "FEMALE",
              "DIVERS"
            ]
          },
          "emailAddress": {
            "type": "string"
          },
          "samsInstance": {
            "type": "string"
          },
          "refsoftID": {
            "type": "string"
          }
        }
      }
    }
  }
}
