// http://wiki.sams-server.de/wiki/XML-Schnittstelle
// SpielrundenÃ¼bersicht
// Zeigt eine Liste alle aktuell verfÃ¼gbaren Ligen und Wettbewerbe an. Hier finden sich auch die IDs (matchSeriesId) der Spielrunden (intern "match series"), die fÃ¼r die weiteren Abfragen relevant sind. Die Spielrunden-ID ist saisonabhÃ¤ngig, um den Abruf von Daten aus alten Saisons zu ermÃ¶glichen. Seit Januar 2016 ist zudem eine allSeasonMatchSeriesId verfÃ¼gbar, die saisonÃ¼bergreifend ist. Wird diese ID zum Abruf der Schnittstellen verwendet, werden immer Daten der Spielrunde aus der jeweils aktuellen Saison zurÃ¼ckgegeben. Die saisonÃ¼bergreifenden IDs sind als UUID hinterlegt und somit Ã¼ber alle SAMS-Datenbanken hinweg eindeutig.
// Weiterhin hervorzuheben sind die Parameter <structureUpdated> und <resultsUpdated>, die den Zeitpunkt der letzten Ã„nderung an der Struktur (Spielpan, Termine, etc.) beziehungsweise an den Ergebnissen enthalten. Erst wenn sich dieser Zeitpunkt Ã¤ndert, sollten die entsprechenden Abfragen durchgefÃ¼hrt und lokal zur weiteren Verwendung abgespeichert werden. Um diese Vorgehensweise zu fÃ¶rdern, gibt es kein Aufruflimit bei der Abfrage der SpielrundenÃ¼bersicht.
// In dieser Schnittstelle wird zusÃ¤tzlich die hierarchische Struktur jeder Liga ausgegeben. Jede Spielrunde ist einer Hierarchie zugeordnet; jede Hierarchie kann mehrere Spielrunden sowie weitere untergeordnete Hierarchien enthalten. Die Hierarchien werden von jedem Verband frei definiert und dienen der organisatorischen Strukturierung der Spielrunden. Im direkt zugeordneten Element <hierarchy> ist die direkte Hierarchie der Liga hinterlegt. Im Element <fullHierarchy> finden sich alle Hierarchien, denen diese Liga untergeordnet ist. Jedes <hierarchy>-Element besitzt einen <hierarchyLevel>, der die Anzahl der Ã¼bergeordneten Hierarchien angibt. Hierarchien mit <hierarchyLevel>0</hierarchyLevel> besitzen keine weiteren Ã¼bergeordneten Hierarchien.
import { env } from "process";
import fs from "fs";

const SAMS_API = env.SAMS_API;
const SAMS_URL = env.SAMS_URL;
const JSON_FILE_TARGET = "data/sams/matchSeries.json";

// fetch Club Data
export default async function getMatchSeries(): Promise<Object | boolean> {
	const apiPath = SAMS_URL + "/xml/matchSeries.xhtml?apiKey=" + SAMS_API;
	await fetch(apiPath)
		.then((response) => Promise.all([response.status, response.text()]))
		.then(([status, xmlData]) => {
			console.log("MATCH SERIES STATUS RESPONSE CODE:" + status);
			if (status == 200) {
				if (!xmlData.includes("<error>")) {
					const parseString = require("xml2js").parseString;
					parseString(xmlData, { explicitArray: false, ignoreAttrs: true, emptyTag: null }, function (err: any, result: any) {
						if (!err) {
							console.log("âœ… Match Series retrieved. Looks good. Writing response to: " + JSON_FILE_TARGET);
							const output = JSON.stringify(result, null, 2);
							fs.writeFileSync(JSON_FILE_TARGET, output);
							return output;
						} else {
							console.log("ðŸš¨ COULD NOT CONVERT MATCH SERIES XML TO JSON! ðŸš¨");
							console.log(err);
							return false;
						}
					});
				} else {
					console.log("ðŸš¨ RECEIVED ERROR MESSAGE FOR MATCH SERIES! ðŸš¨");
					console.log(xmlData);
					return false;
				}
			} else {
				console.log("ðŸš¨ DID NOT RECEIVE A HTTP 200 RESPONSE FOR MATCH SERIES! ðŸš¨");
				return false;
			}
		});
	return true;
}
