name: Matches Update

concurrency:
  group: "sams to pages"
  cancel-in-progress: false
on:
  push:
    paths:
      - "_sams/xml/matches/**"

env:
  GITHUB_TOKEN: ${{ secrets.BK_GH_PAT }}
  MATCHES_SOURCE: _sams/xml/matches/
  MATCHES_TARGET: _matches/
  INDIVIDUAL_MATCHES_TARGET: _spielergebnisse/
  ICS_TARGET: ics/ # the folder containing all ics files
  ICS_COMBINED_TARGET: ics/all.ics # the target for the merged calendar

jobs:

  Identify-Update:
    runs-on: ubuntu-latest
    outputs:
      files-updated: ${{ steps.files.outputs.added_modified }} # contains each file modified by the commit who triggered this run
    steps:
      - name: Identify Modified Files
        id: files
        uses: masesgroup/retrieve-changed-files@v2
        with:
          format: 'json'

  #######################
  ### MATCHES PROCESS ###
  #######################
  Process-Matches:
    needs: Identify-Update
    continue-on-error: true # if one update fails, the flow should continue
    strategy:
      matrix:
        ids: ${{fromJSON(needs.Identify-Update.outputs.files-updated)}}
    outputs:
      upload_required: ${{ steps.upload_status.outputs.required }} # controls the artifact download before commit
    runs-on: ubuntu-latest
    steps:
      - name: Filter & Fetch Matches
        id: filtered_fetch
        if: contains( matrix.ids, env.MATCHES_SOURCE )
        # checks if the file is a match
        run: |
          mkdir -p ${{env.MATCHES_SOURCE}}
          curl -o ${{matrix.ids}} "https://raw.githubusercontent.com/terijaki/vcmuellheim/main/${{matrix.ids}}" -f --retry 3 --retry-delay 30
          echo "${{matrix.ids}}"

      - name: Isolate ID # Isolate just the ID from the file (remove path and file extension) and make it available in later steps
        id: isolate_id
        if: steps.filtered_fetch.conclusion == 'success'
        run: |
          id_only=${{matrix.ids}}
          id_only=$(echo $id_only | sed -e 's!\.xml!!')
          id_only=$(echo $id_only | sed -e 's!${{env.MATCHES_SOURCE}}!!')
          echo $id_only
          echo "id=$id_only" >> $GITHUB_OUTPUT

      - name: Cleanup SAMS XML # removes strings that break the XLST
        id: cleanup_xml
        run: sed -i -e 's!xmlns="http://sams-server.de/api/xml/ns/matches" !!g' ${{matrix.ids}}

      - name: Get XSLT templates # Download the templates from our repo
        id: get_xslt_template
        if: steps.cleanup_xml.conclusion == 'success'
        run: |
          curl -o matches.xslt "https://raw.githubusercontent.com/terijaki/vcmuellheim/main/_sams/xslt/matches.xslt" -f --retry 3 --retry-delay 30
          curl -o individual_matches.xslt "https://raw.githubusercontent.com/terijaki/vcmuellheim/main/_sams/xslt/individual_matches.xslt" -f --retry 3 --retry-delay 30

      - name: XSLT processing (matches) # Push the XML through the XSLT
        id: matches_xslt
        if: steps.cleanup_xml.conclusion == 'success'
        run: |
          mkdir -p ${{env.MATCHES_TARGET}}
          targetfile=${{env.MATCHES_TARGET}}
          targetfile+=${{steps.isolate_id.outputs.id}}
          targetfile+=".html"
          echo $targetfile
          sudo apt-get install xsltproc
          xsltproc matches.xslt ${{matrix.ids}} > $targetfile

      ### handle calender file caching ###
      - name: Import & Modify iCal # Import the iCal file so we can cache it
        # this downlodas the ical file from SAMS, saves it as ics then adds "team name + VC Müllheim Spielplan" as calender name to it
        # the modification is a beautification of the calendar file only and does not affect functionality
        id: samsical
        if: steps.matches_xslt.outcome == 'success'
        continue-on-error: true
        run: |
          processed_match_file=${{env.MATCHES_TARGET}}
          processed_match_file+=${{steps.isolate_id.outputs.id}}
          processed_match_file+=".html"
          ics_target_file=${{env.ICS_TARGET}}
          ics_target_file+=${{steps.isolate_id.outputs.id}}
          ics_target_file+=".ics"
          echo $processed_match_file" is used to modify "$ics_target_file" (Team and Club name)"
          mkdir -p ${{env.ICS_TARGET}}
          curl -o $ics_target_file "https://www.sbvv-online.de/iCal/team/matches.ical?teamId=${{steps.isolate_id.outputs.id}}" -f --retry 5 --retry-delay 60
          teamname=$(awk "/title: (.*) \(Saison/{print}" $processed_match_file | sed 's!title: !!' | sed 's! (Saison.*!!')
          echo $teamname
          sed -i -e "s!BEGIN:VCALENDAR!BEGIN:VCALENDAR\nX-WR-CALNAME:$teamname (VC Müllheim)!g" $ics_target_file
        ## this job relies on the proccessed .html files inside _matches/ as it extraxts the name of the league from there. e.g. "title: Verbandsliga Herren (Saison 2022/23)""

      ### individual matches ###
      - name: XSLT processing (individual matches) # Download, install and run the XSLT processor (Saxon to use XSLT 2.0 features)
        id: individual_matches_xslt
        if: steps.matches_xslt.conclusion == 'success'
        run: |
          git clone https://github.com/sputnick-dev/saxon-lint.git
          cd saxon-lint*
          chmod +x saxon-lint.pl
          ./saxon-lint.pl --help
          cd ..
          mkdir -p ${{env.INDIVIDUAL_MATCHES_TARGET}}
          ./saxon-lint/saxon-lint.pl --xslt individual_matches.xslt ${{matrix.ids}}
          find . -path "*${{env.INDIVIDUAL_MATCHES_TARGET}}*"
        # the saxon output file & location is declared in the xslt file, not by this command!
        # this is because we cannot use the season ID, as the target file needs to use the unique match ID

      - name: Upload Artifact (Individual Matches)
        id: upload_individual_matches
        if: steps.individual_matches_xslt.conclusion == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: individual_matches
          path: ${{env.INDIVIDUAL_MATCHES_TARGET}}

      - name: Upload Artifact (Calender Files)
        id: upload_ics_files
        if: steps.samsical.conclusion == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: ics
          path: ${{env.ICS_TARGET}}

      - name: Upload Status
        id: upload_status
        if: steps.samsical.conclusion == 'success'
        run: echo "required=yes" >> $GITHUB_OUTPUT
  ##########################
  ### GIT UPDATE PROCESS ###
  ##########################
  Git-Update:
    needs:
      - Process-Matches
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3
        with:
          token: ${{env.GITHUB_TOKEN}}
          fetch-depth: 0

      - name: Setup Git Config
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"

      - name: Download Individual Matches
        id: download_individual_matches
        if: contains(needs.Process-Matches.outputs.upload_required, 'yes')
        continue-on-error: true # sometimes there are no individual match updates
        uses: actions/download-artifact@v3
        with:
          name: individual_matches
          path: ${{env.INDIVIDUAL_MATCHES_TARGET}}

      - name: Commit Individual Matching
        if: steps.download_individual_matches.conclusion == 'success'
        continue-on-error: true # don't throw an error as there won't always be changes
        run: |
          git add "${{env.INDIVIDUAL_MATCHES_TARGET}}"
          git commit -m "new or updated individual matches"

      - name: Download Calender Files
        id: download_ics
        if: contains(needs.Process-Matches.outputs.upload_required, 'yes')
        uses: actions/download-artifact@v3
        with:
          name: ics
          path: ${{ env.ICS_TARGET }}

      - name: Merge Calendar Files
        if: steps.download_ics.conclusion == 'success'
        id: merge_cal
        run: |
          cat ${{env.ICS_TARGET}}*.ics > temp1.ics
          cat temp1.ics | grep -v CALNAME | grep -v BEGIN:VCALENDAR | grep -v END:VCALENDAR > temp2.ics
          echo "BEGIN:VCALENDAR" > ${{env.ICS_COMBINED_TARGET}}
          echo "X-WR-CALNAME:Volleyballclub Müllheim" >> ${{env.ICS_COMBINED_TARGET}}
          cat temp2.ics >> ${{env.ICS_COMBINED_TARGET}}
          echo "END:VCALENDAR" >> ${{env.ICS_COMBINED_TARGET}}
          rm temp1.ics temp2.ics
        # overwrites the merged calendar file with data from all other ics (presumably)

      - name: Commit Calender Files
        if: steps.download_ics.conclusion == 'success'
        continue-on-error: true # don't throw an error as there won't always be changes
        run: |
          git add "${{env.ICS_TARGET}}"
          git commit -m "new or updated ics file"

      - name: Git Push
        continue-on-error: true # don't throw an error as there won't always be changes
        run: |
          git pull --rebase
          git push origin --all --quiet