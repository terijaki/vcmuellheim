name: SAMS Match Schedule

concurrency: sams

on:
  schedule:
    - cron: 22 3 * * * # every night at 3:22
    - cron: 15,45 10-22 * * 0,6 # twice per hour on sa & sun between 10AM - 10PM
  workflow_dispatch:

env:
  SAMS_KEY: ${{ secrets.SAMS_API }} # SAMS API key
  SAMS_URL: https://www.volleyball-baden.de # start of the api http structure
  REPO_TARGET1: _matches # the output folder for the entire matches
  REPO_TARGET2: _spielergebnisse # the output folder for the individual matches (to change, also updated inside the XSLT!!)

jobs:
  Get-Teams:
    runs-on: ubuntu-latest
    outputs:
      teamids: ${{steps.teamsarray.outputs.teamids}} # outputs team IDs in the form of [123,456,789]
    steps:
      - name: Get club.xml cache # Get the catched club.xml
        run: curl -o club.xml "https://vcmuellheim.de/sams/club.xml"

      - name: Get XML
        id: getxml
        uses: mavrosxristoforos/get-xml-info@1.0
        with:
          xml-file: "club.xml"
          xpath: "/sportsclub/teams/team/seasonTeamId" #extract all team IDs from the XML

      - name: Transform Team IDs
        id: teamsarray
        run: echo "::set-output name=teamids::[${{steps.getxml.outputs.info}}]" # transform IDs from "123,456,789" to "[123,456,789]"

  Query-and-Process-XML:
    needs: Get-Teams
    continue-on-error: true # if one team fails, the flow should continue
    strategy:
      matrix:
        teams: ${{fromJSON(needs.Get-Teams.outputs.teamids)}} # this has to use fromJSON, see https://github.blog/changelog/2020-04-15-github-actions-new-workflow-features/
    runs-on: ubuntu-latest
    steps:
      - name: Get XSLT templates # Download the templates from our repo
        run: |
          curl -o matches.xslt "https://vcmuellheim.de/sams/matches.xslt"
          curl -o individual_matches.xslt "https://vcmuellheim.de/sams/individual_matches.xslt"

      - name: Query SAMS # make the API call to the SAMS server and save it as XML
        run: |
          mkdir -p sams_xml_temp
          curl -o sams_xml_temp/${{matrix.teams}}.xml "$SAMS_URL/xml/matches.xhtml?apiKey=$SAMS_KEY&teamId=${{matrix.teams}}"

      - name: Cleanup SAMS XML # removes strings that break the XLST
        run: sed -i -e 's!xmlns="http://sams-server.de/api/xml/ns/matches" !!g' sams_xml_temp/${{matrix.teams}}.xml

      - name: Add timestamp to SAMS XML # includes a timestamp in German format
        run: sed -i -e 's!</matches>!<timestamp>'$(TZ=Europe/Berlin date +%d.%m.%Y)', '$(TZ=Europe/Berlin date +%H:%M)' Uhr</timestamp></matches>!g' sams_xml_temp/${{matrix.teams}}.xml

      - name: Update permalink in XSLT template # so we can reach the matches page after the Jekyll build
        run: sed -i -e 's!TEAMIDHERE!${{matrix.teams}}!g' matches.xslt

      - name: XSLT processing (matches) # Push the XML through the XSLT
        id: matchesxslt
        run: |
          mkdir -p ${{env.REPO_TARGET1}}
          sudo apt-get install xsltproc
          xsltproc matches.xslt sams_xml_temp/${{matrix.teams}}.xml > ${{env.REPO_TARGET1}}/${{matrix.teams}}.html
          sed -i -e 's!CALURL1!https://vcmuellheim.de/${{env.REPO_TARGET1}}/${{matrix.teams}}.ics!g' ${{env.REPO_TARGET1}}/${{matrix.teams}}.html
          sed -i -e 's!CALURL2!webcals://vcmuellheim.de/${{env.REPO_TARGET1}}/${{matrix.teams}}.ics!g' ${{env.REPO_TARGET1}}/${{matrix.teams}}.html

      - name: Import & Modify SAMS iCal # Import the iCal file so we can cache it
        # this downlodas the ical file from Sams, then adds "team name + VC MüllheimSpielplan" as calender name
        # the modification is a beautification only and not a required field 
        id: samsical
        if: steps.matchesxslt.outcome == 'success'
        continue-on-error: true
        run: |
          curl -o ${{env.REPO_TARGET1}}/${{matrix.teams}}.ics "https://www.sbvv-online.de/iCal/team/matches.ical?teamId=${{matrix.teams}}"
          teamname=$(awk "/title: (.*) \(Saison/{print}" ${{env.REPO_TARGET1}}/${{matrix.teams}}.html | sed 's!title: !!' | sed 's! (Saison.*!!')
          echo $teamname
          sed -i -e "s!BEGIN:VCALENDAR!BEGIN:VCALENDAR\nX-WR-CALNAME:$teamname (VC Müllheim)!g" ${{env.REPO_TARGET1}}/${{matrix.teams}}.ics

      - name: Patch Calender URL # Replace the links to .ics file and remove the display-none class
        if: steps.samsical.outcome == 'success'
        run: |
          sed -i -e 's!CALURL1!https://vcmuellheim.de/${{env.REPO_TARGET1}}/${{matrix.teams}}.ics!g' ${{env.REPO_TARGET1}}/${{matrix.teams}}.html
          sed -i -e 's!CALURL2!webcals://vcmuellheim.de/${{env.REPO_TARGET1}}/${{matrix.teams}}.ics!g' ${{env.REPO_TARGET1}}/${{matrix.teams}}.html
          sed -i -e 's!calendar d-none!calendar!g' ${{env.REPO_TARGET1}}/${{matrix.teams}}.html

      - name: Upload Artifact (Matches)
        uses: actions/upload-artifact@v3
        with:
          name: matches
          path: ${{env.REPO_TARGET1}}

      - name: XSLT processing (individual matches) # Download and install the XSLT processor (Saxon to use XSLT 2.0 features)
        run: |
          git clone https://github.com/sputnick-dev/saxon-lint.git
          cd saxon-lint*
          chmod +x saxon-lint.pl
          ./saxon-lint.pl --help
          cd ..
          mkdir -p ${{env.REPO_TARGET2}}
          ./saxon-lint/saxon-lint.pl --xslt individual_matches.xslt sams_xml_temp/${{matrix.teams}}.xml

      - name: Upload Artifact (Individual Matches)
        uses: actions/upload-artifact@v3
        with:
          name: individual_matches
          path: ${{env.REPO_TARGET2}}

  Git-Update:
    needs: Query-and-Process-XML
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download Exports (Matches)
        uses: actions/download-artifact@v3
        with:
          name: matches
          path: ${{env.REPO_TARGET1}}

      - name: Download Exports (Individual Matches)
        continue-on-error: true # may fail if no matches with results exist yet (e.g. during the first few days of the season)
        uses: actions/download-artifact@v3
        with:
          name: individual_matches
          path: ${{env.REPO_TARGET2}}

      - name: Setup Git Config
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"

      - name: Git Pull # to avoid conflicts with parallel runs
        run: |
          git pull

      - name: Git Commit Matches
        continue-on-error: true # don't throw an error as there won't always be changes
        run: |
          git add "${{env.REPO_TARGET1}}/*"
          git commit -m "sams matches update"

      - name: Git Commit Individual Matches
        continue-on-error: true # don't throw an error as there won't always be changes
        run: |
          git add "${{env.REPO_TARGET2}}/*"
          git commit -m "sams new individual match"

      - name: Git Push
        continue-on-error: true # don't throw an error as there won't always be changes
        run: |
          git push origin --all --quiet
