name: Share Blog Post on Social

concurrency:
  group: social
  cancel-in-progress: false

on:
  workflow_dispatch:
  push:
    paths:
      - '_posts/**'

jobs:
  New-Posts-for-Social:
    runs-on: ubuntu-latest
    outputs:
      posts: ${{steps.scanposts.outputs.posts}} #array of posts not yet posted
      messages: ${{steps.messagesforsocial.outputs.messages}} #array of messages to post
    steps:

      - name: Checkout Source Code
        uses: actions/checkout@v3
        with: # important to ensure fetch all history!
          fetch-depth: 0

      - name: Setup Git Config
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"

      - name: Scan POSTS #checks the git history and creates an array of all the posts that do not contain the word "social"
        id: scanposts
        run: |
          cd _posts
          declare posts=()
          for f in $(ls | tr '\n' '\n')
            do
              if [ -z "$(git log --follow --pretty=oneline --grep='social' -q -- $f)" ]
                then
                  echo "$f added to list of posts to post"
                  posts+=("$f")
                else
                  echo "$f already posted on Social"
              fi
            done
          echo "The following posts have not been posted: ${posts[*]}"
          echo "::set-output name=posts::${posts[*]}"

      - name: Mark posts with string #change frontmatter to indicate that they have been posted on Twitter
        id: markfiles
        if: steps.scanposts.outputs.posts != ''
        run: |
          cd _posts
          declare posts=()
          echo ${{steps.scanposts.outputs.posts}}
          for postfile in ${{steps.scanposts.outputs.posts}}
           do
            sed -i -e 's!title:!posted-on-social: true\ntitle:!g' $postfile
            git add $postfile
          done
          git commit -m "tagged as shared on social"

      - name: Messages for Social # Select the message for Social
        #for each post we extract the title using regex, and remove ' and " characters
        # then we strip out the date and time from the file name
        # we then patch it together as TITLE + URL + FILENAME
        id: messagesforsocial
        if: steps.markfiles.outcome == 'success'
        run: |
          cd _posts
          declare messages=()
          echo 'Preparing the following posts for Social: ${{steps.scanposts.outputs.posts}}'
          for postfile in ${{steps.scanposts.outputs.posts}}
            do
              messages+=("$(awk '/title: (.*)/{print}' $postfile | tr -d \' | tr -d \" | sed -e 's!title: !!') https://vcmuellheim.de/$(echo $postfile | cut -c12- | sed 's!.md!!')")
            done
          echo "The following messages will be shared: ${messages[*]}"
          echo "::set-output name=messages::$(jq --compact-output --null-input '$ARGS.positional' --args -- "${messages[@]}")"

      - name: Git Push
        if: steps.messagesforsocial.outcome == 'success'
        run: |
          git pull --quiet --rebase
          git push origin --all --quiet


  Publish-to-Social:
    needs: New-Posts-for-Social
    if: needs.New-Posts-for-Social.outputs.messages != ''
    continue-on-error: true # if one match fails, the flow should continue
    strategy:
      matrix:
        messages:
          - ${{fromJSON(needs.New-Posts-for-Social.outputs.messages)}}
    runs-on: ubuntu-latest
    steps:
      - name: Sleep for 10 minutes
        uses: kibertoad/wait-action@1.0.1
        with:
          time: '10m'

      - name: Send Tweet
        uses: devigned/go-twitter-action@v1
        with:
          message: ${{matrix.messages}}
          apiKey: ${{ secrets.TWITTER_API_KEY }}
          apiKeySecret: ${{ secrets.TWITTER_API_KEY_SECRET }}
          accessToken: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          accessTokenSecret: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}

      - name: Send Toot
        id: mastodon
        uses: cbrgm/mastodon-github-action@v1
        with:
          message: ${{matrix.messages}}
          visibility: "public"
        env:
          MASTODON_URL: ${{ secrets.MASTODON_URL }}
          MASTODON_ACCESS_TOKEN: ${{ secrets.MASTODON_ACCESS_TOKEN }}


#  Post-to-Facebook:
#    needs: New-Posts-for-Social
#    if: needs.New-Posts-for-Social.outputs.messages != ''
#    continue-on-error: true # if one match fails, the flow should continue
#    strategy:
#      matrix:
#        messages:
#          - ${{fromJSON((needs.New-Posts-for-Social.outputs.messages)}}
#    runs-on: ubuntu-latest
#    steps:
#      - name: Facebook Page Post #creates a scheduled Facebook page post 10 minutes in the future
#        run: |
#          post_title=$(echo ${{matrix.messages}} | sed -e 's!https.*!!g')
#          post_link=$(echo ${{matrix.messages}} | sed -e 's!.*https://!https://!')
#          curl -i -X POST "https://graph.facebook.com/365533836864448/feed?message=$post_title&link=$post_link&published=false&scheduled_publish_time=$(echo "`date +%s` + 600" | bc)&access_token=${{ secrets.FACEBOOK_PAGE_ACCESS_TOKEN }}"
