name: Share Match Results on Social

concurrency:
  group: social
  cancel-in-progress: false

on:
  workflow_dispatch:
  push:
    paths:
    - '_spielergebnisse/**'

jobs:
  New-Matches-for-Social:
    runs-on: ubuntu-latest
    outputs:
      matches: ${{steps.scanmatches.outputs.matches}} #array of matches not yet posted
      messages: ${{steps.messagesforsocial.outputs.messages}} #array of messages to post
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3
        with: # important to ensure fetch all history!
          fetch-depth: 0

      - name: Setup Git Config
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"

      - name: Scan Matches #checks the git history and creates an array of all the matches that do not contain the word "social"
        id: scanmatches
        run: |
          cd _spielergebnisse
          declare matches=()
          for f in $(ls | tr '\n' '\n')
            do
              if [ -z "$(git log --follow --pretty=oneline --grep='social' -q -- $f)" ]
                then
                  echo "$f added to list of matches to post"
                  matches+=("$f")
                else
                  echo "$f already posted on social"
              fi
            done
          echo "The following matches have not been posted: ${matches[*]}"
          echo "matches=${matches[*]}" >> $GITHUB_OUTPUT

      - name: Mark matchfiles with string #change frontmatter to indicate that they have been posted on Social
        id: markfiles
        if: steps.scanmatches.outputs.matches != ''
        run: |
          cd _spielergebnisse
          declare matches=()
          echo ${{steps.scanmatches.outputs.matches}}
          for matchfile in ${{steps.scanmatches.outputs.matches}}
           do
            sed -i -e 's!title:!posted-on-social: true\ntitle:!g' $matchfile
            git add $matchfile
          done
          git commit -m "tagged as posted on social [actions skip]"

      - name: Messages for Social # set the last line of the match file as message for Social
        id: messagesforsocial
        if: steps.markfiles.outcome == 'success'
        run: |
          cd _spielergebnisse
          declare messages=()
          echo 'Preparing the following matches for Social: ${{steps.scanmatches.outputs.matches}}'
          for matchfile in ${{steps.scanmatches.outputs.matches}}
            do
              messages+=("$(tail -n 1 $matchfile)")
            done
          echo "messages=$(jq --compact-output --null-input '$ARGS.positional' --args -- "${messages[@]}")" >> $GITHUB_OUTPUT

      - name: Git Push
        if: steps.messagesforsocial.outcome == 'success'
        run: |
          git pull --quiet --rebase
          git push origin --all --quiet -f

  Publish-to-Social:
    needs: New-Matches-for-Social
    if: needs.New-Matches-for-Social.outputs.messages != ''
    continue-on-error: true # if one match fails, the flow should continue
    strategy:
      matrix:
        messages:
          - ${{fromJSON(needs.New-Matches-for-Social.outputs.messages)}}
    runs-on: ubuntu-latest
    steps:
      - name: Send Toot
        id: mastodon
        uses: cbrgm/mastodon-github-action@v1
        with:
          message: ${{matrix.messages}}
          visibility: "unlisted"
        env:
          MASTODON_URL: ${{ secrets.MASTODON_URL }}
          MASTODON_ACCESS_TOKEN: ${{ secrets.MASTODON_ACCESS_TOKEN }}
