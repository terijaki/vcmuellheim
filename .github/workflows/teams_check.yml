name: Verify Team IDs

concurrency:
  group: "teams-check"
  cancel-in-progress: false

on:
  push:
    paths:
      - "_sams/xml/club.xml"
  workflow_dispatch:

env:
  SAMS_CLUB_FILE: _sams/xml/club.xml # the file containing the current team IDs
  TEAMS_FOLDER: _teams/ # the folder containing the teams on our website

jobs:
  Verify-Teams:
    runs-on: ubuntu-latest
    outputs:
      outdated-teams: ${{ steps.check-teams.outputs.outdated }} # receives the outdated team info
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Check Team still exists
        id: check-teams
        continue-on-error: true
        run: |
          echo "Starting process to check if team ID need attention..."
          outdated=("")
          for team in $(ls $TEAMS_FOLDER)
            do
              this_team_id=$(grep -e "sbvv_id" "$TEAMS_FOLDER$team" | sed 's/[^0-9]*//g')
              if [ "$this_team_id" -gt 3 ]; then
                check_club=$(grep -e $this_team_id $SAMS_CLUB_FILE)
                check_existence=${#check_club}
                if [ $check_existence < 1 ]; then
                  echo "$team ($this_team_id) no longer present in club.xml\!"
                  outdated+=("\"$team#$this_team_id\"")
                else
                  echo "$team ($this_team_id) still present in club.xml"
                fi
              fi
            done
          echo ${outdated[@]}
          if [ -z "$outdated" ]; then
            outdated=$(echo ${outdated[@]} | sed -e 's! !,!g')
            echo "outdated=[$outdated]" >> $GITHUB_OUTPUT
          else
            echo "outdated=none" >> $GITHUB_OUTPUT
          fi
        # loop through files in the teams folder and check for sbvv_id
        # for every Id found, check if the ID is still present in the SAMS club.xml
        # when the ID is no longer present, add it to an array
        # the array is then converted from bash array to JSON array, which serves as a matrix for the follow up job 

  Create-Issue:
    needs: Verify-Teams
    if: contains(fromJSON(needs.Verify-Teams.outputs.outdated-teams), 'none') == false
    continue-on-error: true # if issue cretion fails, the others should continue
    strategy:
      matrix:
       team: ${{fromJSON(needs.Verify-Teams.outputs.outdated-teams)}}
    runs-on: ubuntu-latest
    steps:
      - name: Log & Separate Data
        id: log
        run: |
          team_name=$(cut -d '#' -f1 <<< "${{matrix.team}}")
          sams_id=$(cut -d '#' -f2 <<< "${{matrix.team}}")
          echo "The Team ID ($sams_id) stored in $team_name is no longer present in SAMS!"
          echo "team_name=$team_name" >> $GITHUB_OUTPUT
          echo "sams_id=$sams_id" >> $GITHUB_OUTPUT
        # splits the Team Name (e.g. herren1.md) and SAMS ID (e.g 123456)
        # stores values separately to be used dynamically in issue creation title and body

      - uses: dacbd/create-issue-action@main
        name: Create Issue Action
        with:
          token: ${{ github.token }}
          title: Team ID in ${{steps.log.outputs.team_name}} is outdated
          body: The SAMS ID (${{steps.log.outputs.sams_id}}) stored in ${{steps.log.outputs.team_name}} could not be found in club.xml and may need to be updated. ${{github.sha}}