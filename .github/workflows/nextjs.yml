name: "Update, Build & Deployment"

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    paths-ignore:
      - ".github/**"
      - "_sams/**"
      - "inbox/**"
      - "_inbox/**"
  schedule: # times in in UTC
    - cron: 30 2 * * TUE,THU # At 02:30 on Tuesday and Thursday
    - cron: 15,45 09-21 * JAN-APR,OCT-DEC 0,6 # At minute 15 & 45 past every hour, from 9 AM to 9 PM on Sunday & Saturday, from October through April

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  GITHUB_SUMMARY_FILE: "github_summary.md"
  SAMS_FOLDER: "data/sams"
  SAMS_MATCHSERIES_JSON: "data/sams/matchSeries.json"
  IMAGES_FOLDER: "public/images"
  BLOG_FOLDER: "data/posts"
  INBOX_FOLDER: "inbox"
  SOCIAL_CACHE_MATCHES: "data/social/matchResults.json"

jobs:
  # Build jobs
  build:
    name: "🏗️ SAMS & Build"
    runs-on: ubuntu-latest
    outputs:
      sams_status: ${{ steps.sams_git.outputs.status }}
      sams_social: ${{ steps.sams_git.outputs.social }}
      build_status: ${{ steps.next_build.outputs.status }}
      blog_check: ${{ steps.next_build.outputs.status }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npm run" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Perform SAMS Update
        id: sams_update
        if: ${{ github.event_name != 'push' }}
        continue-on-error: true
        run: npm run sams-update
        env:
          SAMS_API: ${{ secrets.SAMS_API }}

      - name: Commit SAMS Files
        id: sams_git
        if: steps.sams_update.conclusion == 'success'
        continue-on-error: true
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"

          if [ -z "$(git stage ${{ env.SAMS_MATCHSERIES_JSON }} --dry-run)" ]
          then
            echo "✅ Match Series up to date."
            echo "✅ Match Series up to date." >> $GITHUB_STEP_SUMMARY
          else
            echo "🏐 Match Series changes detected and staged."
            git add ${{ env.SAMS_MATCHSERIES_JSON }} --force || true
            git commit -m "automated deployment update" || true
            echo "🏐 Match Series changes detected and staged." >> $GITHUB_STEP_SUMMARY
          fi

          if [ -z "$(git stage ${{ env.SAMS_FOLDER }} --dry-run)" ]
          then
            echo "✅ Club data up to date."
            echo "✅ Club data up to date." >> $GITHUB_STEP_SUMMARY

          else
            echo "🏐 Club changes detected! Pushing to repository."
            git add ${{ env.SAMS_FOLDER }}
            git commit -m "automated deployment update"
            git push origin --all --quiet --force
            echo "status=updated" >> $GITHUB_OUTPUT
            echo "🏐 Club changes detected and pushed to repository." >> $GITHUB_STEP_SUMMARY
          fi

          cat ${{ env.GITHUB_SUMMARY_FILE }} >> $GITHUB_STEP_SUMMARY

          if [ -z "$(git stage ${{ env.SOCIAL_CACHE_MATCHES }} --dry-run)" ]
          then
            echo "✅ No new Match Result for social."
            echo "✅ No new Match Result for social." >> $GITHUB_STEP_SUMMARY

          else
            echo "🏐 New Match Result detected! Pushing to repository."
            git add ${{ env.SOCIAL_CACHE_MATCHES }}
            git commit -m "automated deployment update"
            git push origin --all --quiet --force
            echo "social=new" >> $GITHUB_OUTPUT
            echo "🏐 New Match Result detected! Pushing to repository." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Setup Pages
        id: setup_pages
        ## skip the github pages and build process if there was no SAMS update for our club
        if: ${{ github.event.schedule != '15,45 09-21 * JAN-APR,OCT-DEC 0,6' || steps.sams_git.outputs.status == 'updated' }}
        uses: actions/configure-pages@v4
        with:
          # Automatically inject basePath in your Next.js configuration file and disable
          # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
          # You may remove this line if you want to manage the configuration yourself.
          static_site_generator: next

      - name: Build with Next.js
        id: next_build
        if: steps.setup_pages.conclusion == 'success'
        run: |
          echo "status=started" >> $GITHUB_OUTPUT
          ${{ steps.detect-package-manager.outputs.runner }} build
          echo "👷 Build complete:" >> $GITHUB_STEP_SUMMARY
          du -hsc out | grep -e "total" >> $GITHUB_STEP_SUMMARY

      - name: Commit Optimized Images
        if: steps.next_build.conclusion == 'success'
        continue-on-error: true
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"

          if [ -z "$(git stage ${{ env.IMAGES_FOLDER }} --dry-run)" ]
          then
            echo "✅ Image optimizations are up to date."
            echo "✅ Image optimizations are up to date." >> $GITHUB_STEP_SUMMARY
          else
            echo "🖼️ New image optimizations! Pushing to repository."
            git add ${{ env.IMAGES_FOLDER }}
            git commit -m "automated deployment update"
            git push origin --all --quiet --force
            echo "🖼️ New image optimizations changes detected and pushed to repository." >> $GITHUB_STEP_SUMMARY
          fi

      - name: New Blog Post Check
        id: blog_check
        if: steps.next_build.conclusion == 'success'
        continue-on-error: true
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"

          if [ -z "$(git stage ${{ env.BLOG_FOLDER }} --dry-run)" ]
          then
            echo "✅ No new blog post found."
            echo "✅ No new blog post found." >> $GITHUB_STEP_SUMMARY
          else
            echo "📑 New Blog post detected! Pushing to repository and cleaning the inbox folder."
            git add ${{ env.BLOG_FOLDER }}
            git add ${{ env.INBOX_FOLDER }}
            git commit -m "automated deployment update"
            git push origin --all --quiet --force
            echo "status=new" >> $GITHUB_OUTPUT
            echo "📑 New Blog post detected. Sharing on social initiated." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload artifact
        if: steps.next_build.conclusion == 'success'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # Deployment job
  deploy:
    name: "🚚 Deployment"
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: ${{ needs.build.outputs.build_status == 'started' }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Social sharing job
  mastodon:
    name: "📡 Share to Mastodon"
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: ${{ needs.build.outputs.build_status == 'started' &&  (needs.build.outputs.sams_social == 'new' || needs.build.outputs.blog_check == 'new') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npm run" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Match Results
        id: match_results
        if: ${{ needs.build.outputs.sams_social == 'new' }}
        env:
          MASTODON_CLIENT_ID: ${{ secrets.MASTODON_CLIENT_ID }}
          MASTODON_ACCESS_TOKEN: ${{ secrets.MASTODON_ACCESS_TOKEN }}
        run: npm run sams-new-results

      - name: Blog Posts (WIP)
        id: blog_posts
        if: ${{ needs.build.outputs.blog_check == 'new' }}
        run: echo "To be implemented."

      - name: Github Summary
        if: steps.match_results.conclusion == 'success' || steps.blog_posts.conclusion == 'success'
        continue-on-error: true
        run: cat ${{ env.GITHUB_SUMMARY_FILE }} >> $GITHUB_STEP_SUMMARY

      - name: Commit Changes
        if: steps.match_results.conclusion == 'success' || steps.blog_posts.conclusion == 'success'
        continue-on-error: true
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"

          if [ -z "$(git stage ${{ env.SOCIAL_CACHE_MATCHES }} --dry-run)" ]
          then
            echo "✅ Match Results Cache file up to date."
            echo "✅ Match Results Cache file up to date." >> $GITHUB_STEP_SUMMARY
          else
            echo "🏐 Match Results Cache file modified! Pushing to repository."
            git add ${{ env.SOCIAL_CACHE_MATCHES }}
            git commit -m "automated deployment update"
            git push origin --all --quiet --force
            echo "🏐 Match Results Cache file modified and pushed to repository." >> $GITHUB_STEP_SUMMARY
          fi
