name: Deploy to AWS

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1
  ECS_CLUSTER: vcmuellheim-cluster
  ECS_SERVICE: vcmuellheim-service

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Get ECR repository URI
      id: ecr-uri
      run: |
        ECR_URI=$(aws cloudformation describe-stacks --stack-name VcmuellheimCompute --query 'Stacks[0].Outputs[?OutputKey==`EcrRepositoryUri`].OutputValue' --output text)
        echo "uri=$ECR_URI" >> $GITHUB_OUTPUT
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY_URI: ${{ steps.ecr-uri.outputs.uri }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container
        docker build -t $ECR_REPOSITORY_URI:$IMAGE_TAG -f Containerfile .
        docker tag $ECR_REPOSITORY_URI:$IMAGE_TAG $ECR_REPOSITORY_URI:latest
        
        # Push to ECR
        docker push $ECR_REPOSITORY_URI:$IMAGE_TAG
        docker push $ECR_REPOSITORY_URI:latest
        
        # Create image definitions file for ECS deploy
        echo '[{"name":"vcmuellheim","imageUri":"'$ECR_REPOSITORY_URI:$IMAGE_TAG'"}]' > imagedefinitions.json
    
    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --force-new-deployment
    
    - name: Wait for service to be stable
      run: |
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --cli-read-timeout 600 \
          --cli-connect-timeout 60
    
    - name: Get deployment status
      run: |
        echo "ðŸŽ‰ Deployment completed successfully!"
        TASK_ARN=$(aws ecs list-tasks --cluster ${{ env.ECS_CLUSTER }} --service-name ${{ env.ECS_SERVICE }} --desired-status RUNNING --query 'taskArns[0]' --output text)
        if [ "$TASK_ARN" != "None" ] && [ -n "$TASK_ARN" ]; then
          echo "âœ… Running task: $TASK_ARN"
        fi